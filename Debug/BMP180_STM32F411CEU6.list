
BMP180_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004970  08004970  00005970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c0  080049c0  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080049c0  080049c0  000059c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049c8  080049c8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c8  080049c8  000059c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049cc  080049cc  000059cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080049d0  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  08004a40  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004a40  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f67  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001699  00000000  00000000  0000d007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000583  00000000  00000000  0000ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b4c  00000000  00000000  0000f363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a603  00000000  00000000  00024eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e9c  00000000  00000000  0002f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b534e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f4  00000000  00000000  000b5394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b7688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004954 	.word	0x08004954

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004954 	.word	0x08004954

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b96a 	b.w	8000ecc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	460c      	mov	r4, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14e      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	458c      	cmp	ip, r1
 8000c20:	4686      	mov	lr, r0
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	d962      	bls.n	8000cee <__udivmoddi4+0xde>
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0320 	rsb	r3, r2, #32
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	fa20 f303 	lsr.w	r3, r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f f68c 	uxth.w	r6, ip
 8000c46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb04 f106 	mul.w	r1, r4, r6
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c66:	f080 8112 	bcs.w	8000e8e <__udivmoddi4+0x27e>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 810f 	bls.w	8000e8e <__udivmoddi4+0x27e>
 8000c70:	3c02      	subs	r4, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a59      	subs	r1, r3, r1
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb00 f606 	mul.w	r6, r0, r6
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x94>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c96:	f080 80fc 	bcs.w	8000e92 <__udivmoddi4+0x282>
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	f240 80f9 	bls.w	8000e92 <__udivmoddi4+0x282>
 8000ca0:	4463      	add	r3, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11d      	cbz	r5, 8000cb6 <__udivmoddi4+0xa6>
 8000cae:	40d3      	lsrs	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d905      	bls.n	8000cca <__udivmoddi4+0xba>
 8000cbe:	b10d      	cbz	r5, 8000cc4 <__udivmoddi4+0xb4>
 8000cc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e7f5      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cca:	fab3 f183 	clz	r1, r3
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	d146      	bne.n	8000d60 <__udivmoddi4+0x150>
 8000cd2:	42a3      	cmp	r3, r4
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xcc>
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	f0c0 80f0 	bcc.w	8000ebc <__udivmoddi4+0x2ac>
 8000cdc:	1a86      	subs	r6, r0, r2
 8000cde:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d0e6      	beq.n	8000cb6 <__udivmoddi4+0xa6>
 8000ce8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cec:	e7e3      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	f040 8090 	bne.w	8000e14 <__udivmoddi4+0x204>
 8000cf4:	eba1 040c 	sub.w	r4, r1, ip
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb07 f006 	mul.w	r0, r7, r6
 8000d16:	4298      	cmp	r0, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x11c>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x11a>
 8000d24:	4298      	cmp	r0, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2b4>
 8000d2a:	4626      	mov	r6, r4
 8000d2c:	1a1c      	subs	r4, r3, r0
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d36:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb00 f707 	mul.w	r7, r0, r7
 8000d42:	429f      	cmp	r7, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x148>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x146>
 8000d50:	429f      	cmp	r7, r3
 8000d52:	f200 80b0 	bhi.w	8000eb6 <__udivmoddi4+0x2a6>
 8000d56:	4620      	mov	r0, r4
 8000d58:	1bdb      	subs	r3, r3, r7
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0x9c>
 8000d60:	f1c1 0620 	rsb	r6, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d70:	fa04 f301 	lsl.w	r3, r4, r1
 8000d74:	ea43 030c 	orr.w	r3, r3, ip
 8000d78:	40f4      	lsrs	r4, r6
 8000d7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7e:	0c38      	lsrs	r0, r7, #16
 8000d80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d84:	fbb4 fef0 	udiv	lr, r4, r0
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d94:	fb0e f90c 	mul.w	r9, lr, ip
 8000d98:	45a1      	cmp	r9, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x1a6>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	f080 8084 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000daa:	45a1      	cmp	r9, r4
 8000dac:	f240 8081 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000db0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	eba4 0409 	sub.w	r4, r4, r9
 8000dba:	fa1f f983 	uxth.w	r9, r3
 8000dbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d907      	bls.n	8000de2 <__udivmoddi4+0x1d2>
 8000dd2:	193c      	adds	r4, r7, r4
 8000dd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd8:	d267      	bcs.n	8000eaa <__udivmoddi4+0x29a>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d965      	bls.n	8000eaa <__udivmoddi4+0x29a>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000de6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	429c      	cmp	r4, r3
 8000df0:	46ce      	mov	lr, r9
 8000df2:	469c      	mov	ip, r3
 8000df4:	d351      	bcc.n	8000e9a <__udivmoddi4+0x28a>
 8000df6:	d04e      	beq.n	8000e96 <__udivmoddi4+0x286>
 8000df8:	b155      	cbz	r5, 8000e10 <__udivmoddi4+0x200>
 8000dfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000e02:	fa04 f606 	lsl.w	r6, r4, r6
 8000e06:	40cb      	lsrs	r3, r1
 8000e08:	431e      	orrs	r6, r3
 8000e0a:	40cc      	lsrs	r4, r1
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e750      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000e14:	f1c2 0320 	rsb	r3, r2, #32
 8000e18:	fa20 f103 	lsr.w	r1, r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa24 f303 	lsr.w	r3, r4, r3
 8000e24:	4094      	lsls	r4, r2
 8000e26:	430c      	orrs	r4, r1
 8000e28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e38:	fb08 3110 	mls	r1, r8, r0, r3
 8000e3c:	0c23      	lsrs	r3, r4, #16
 8000e3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e42:	fb00 f107 	mul.w	r1, r0, r7
 8000e46:	4299      	cmp	r1, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x24c>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e52:	d22c      	bcs.n	8000eae <__udivmoddi4+0x29e>
 8000e54:	4299      	cmp	r1, r3
 8000e56:	d92a      	bls.n	8000eae <__udivmoddi4+0x29e>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1a5b      	subs	r3, r3, r1
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e64:	fb08 3311 	mls	r3, r8, r1, r3
 8000e68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e6c:	fb01 f307 	mul.w	r3, r1, r7
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x276>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e7c:	d213      	bcs.n	8000ea6 <__udivmoddi4+0x296>
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	d911      	bls.n	8000ea6 <__udivmoddi4+0x296>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	1ae4      	subs	r4, r4, r3
 8000e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e8c:	e739      	b.n	8000d02 <__udivmoddi4+0xf2>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	e6f0      	b.n	8000c74 <__udivmoddi4+0x64>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e706      	b.n	8000ca4 <__udivmoddi4+0x94>
 8000e96:	45c8      	cmp	r8, r9
 8000e98:	d2ae      	bcs.n	8000df8 <__udivmoddi4+0x1e8>
 8000e9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7a8      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	e7ed      	b.n	8000e86 <__udivmoddi4+0x276>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	e799      	b.n	8000de2 <__udivmoddi4+0x1d2>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e7d4      	b.n	8000e5c <__udivmoddi4+0x24c>
 8000eb2:	46d6      	mov	lr, sl
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1a6>
 8000eb6:	4463      	add	r3, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e74d      	b.n	8000d58 <__udivmoddi4+0x148>
 8000ebc:	4606      	mov	r6, r0
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e70f      	b.n	8000ce4 <__udivmoddi4+0xd4>
 8000ec4:	3e02      	subs	r6, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	e730      	b.n	8000d2c <__udivmoddi4+0x11c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <BMP180_Init>:
#define atmPress 101325 //Pa



void BMP180_Init (void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af04      	add	r7, sp, #16
	uint8_t call_data[22] = {0};
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	821a      	strh	r2, [r3, #16]
	uint16_t start_data = 0xAA;
 8000ee8:	23aa      	movs	r3, #170	@ 0xaa
 8000eea:	82fb      	strh	r3, [r7, #22]

	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDRESS, start_data, 1, call_data, 22, HAL_MAX_DELAY);
 8000eec:	8afa      	ldrh	r2, [r7, #22]
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2316      	movs	r3, #22
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	463b      	mov	r3, r7
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	21ee      	movs	r1, #238	@ 0xee
 8000f00:	4836      	ldr	r0, [pc, #216]	@ (8000fdc <BMP180_Init+0x10c>)
 8000f02:	f001 fb6d 	bl	80025e0 <HAL_I2C_Mem_Read>

	AC1 = ((call_data[0]<<8)|call_data[1]);
 8000f06:	783b      	ldrb	r3, [r7, #0]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	787b      	ldrb	r3, [r7, #1]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <BMP180_Init+0x110>)
 8000f16:	801a      	strh	r2, [r3, #0]
	AC2 = ((call_data[2]<<8)|call_data[3]);
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <BMP180_Init+0x114>)
 8000f28:	801a      	strh	r2, [r3, #0]
	AC3 = ((call_data[4]<<8)|call_data[5]);
 8000f2a:	793b      	ldrb	r3, [r7, #4]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <BMP180_Init+0x118>)
 8000f3a:	801a      	strh	r2, [r3, #0]
	AC4 = ((call_data[6]<<8)|call_data[7]);
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <BMP180_Init+0x11c>)
 8000f4e:	801a      	strh	r2, [r3, #0]
	AC5 = ((call_data[8]<<8)|call_data[9]);
 8000f50:	7a3b      	ldrb	r3, [r7, #8]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	7a7b      	ldrb	r3, [r7, #9]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <BMP180_Init+0x120>)
 8000f62:	801a      	strh	r2, [r3, #0]
	AC6 = ((call_data[10]<<8)|call_data[11]);
 8000f64:	7abb      	ldrb	r3, [r7, #10]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	7afb      	ldrb	r3, [r7, #11]
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <BMP180_Init+0x124>)
 8000f76:	801a      	strh	r2, [r3, #0]
	B1 = ((call_data[12]<<8)|call_data[13]);
 8000f78:	7b3b      	ldrb	r3, [r7, #12]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <BMP180_Init+0x128>)
 8000f88:	801a      	strh	r2, [r3, #0]
	B2 = ((call_data[14]<<8)|call_data[15]);
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <BMP180_Init+0x12c>)
 8000f9a:	801a      	strh	r2, [r3, #0]
	MB = ((call_data[16]<<8)|call_data[17]);
 8000f9c:	7c3b      	ldrb	r3, [r7, #16]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <BMP180_Init+0x130>)
 8000fac:	801a      	strh	r2, [r3, #0]
	MC = ((call_data[18]<<8)|call_data[19]);
 8000fae:	7cbb      	ldrb	r3, [r7, #18]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	7cfb      	ldrb	r3, [r7, #19]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <BMP180_Init+0x134>)
 8000fbe:	801a      	strh	r2, [r3, #0]
	MD = ((call_data[20]<<8)|call_data[21]);
 8000fc0:	7d3b      	ldrb	r3, [r7, #20]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	7d7b      	ldrb	r3, [r7, #21]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <BMP180_Init+0x138>)
 8000fd0:	801a      	strh	r2, [r3, #0]

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000d4 	.word	0x200000d4
 8000fe0:	2000008c 	.word	0x2000008c
 8000fe4:	2000008e 	.word	0x2000008e
 8000fe8:	20000090 	.word	0x20000090
 8000fec:	20000092 	.word	0x20000092
 8000ff0:	20000094 	.word	0x20000094
 8000ff4:	20000096 	.word	0x20000096
 8000ff8:	20000098 	.word	0x20000098
 8000ffc:	2000009a 	.word	0x2000009a
 8001000:	2000009c 	.word	0x2000009c
 8001004:	2000009e 	.word	0x2000009e
 8001008:	200000a0 	.word	0x200000a0

0800100c <Read_UT_Value>:


uint16_t Read_UT_Value(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af04      	add	r7, sp, #16
	uint8_t eddrwrite = 0x2E;
 8001012:	232e      	movs	r3, #46	@ 0x2e
 8001014:	71fb      	strb	r3, [r7, #7]
	uint8_t tempdata[2] = {0};
 8001016:	2300      	movs	r3, #0
 8001018:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDRESS, 0xF4, 1, &eddrwrite, 1 , 1000);
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	22f4      	movs	r2, #244	@ 0xf4
 800102c:	21ee      	movs	r1, #238	@ 0xee
 800102e:	480e      	ldr	r0, [pc, #56]	@ (8001068 <Read_UT_Value+0x5c>)
 8001030:	f001 f9dc 	bl	80023ec <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001034:	2005      	movs	r0, #5
 8001036:	f000 fded 	bl	8001c14 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDRESS, 0xF6, 1, tempdata, 2, 1000);
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2302      	movs	r3, #2
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	22f6      	movs	r2, #246	@ 0xf6
 800104c:	21ee      	movs	r1, #238	@ 0xee
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <Read_UT_Value+0x5c>)
 8001050:	f001 fac6 	bl	80025e0 <HAL_I2C_Mem_Read>
	return ((tempdata[0]<<8)+ tempdata[1]);
 8001054:	793b      	ldrb	r3, [r7, #4]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	797a      	ldrb	r2, [r7, #5]
 800105c:	4413      	add	r3, r2
 800105e:	b29b      	uxth	r3, r3

}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000d4 	.word	0x200000d4

0800106c <Get_Temp_Value>:

float Get_Temp_Value(void)
{
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	af00      	add	r7, sp, #0
	UT = Read_UT_Value();
 8001070:	f7ff ffcc 	bl	800100c <Read_UT_Value>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b3e      	ldr	r3, [pc, #248]	@ (8001174 <Get_Temp_Value+0x108>)
 800107a:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800107c:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <Get_Temp_Value+0x108>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a3d      	ldr	r2, [pc, #244]	@ (8001178 <Get_Temp_Value+0x10c>)
 8001082:	8812      	ldrh	r2, [r2, #0]
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f9f8 	bl	800047c <__aeabi_i2d>
 800108c:	4604      	mov	r4, r0
 800108e:	460d      	mov	r5, r1
 8001090:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <Get_Temp_Value+0x110>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f9f1 	bl	800047c <__aeabi_i2d>
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <Get_Temp_Value+0x114>)
 80010a0:	f7ff fb80 	bl	80007a4 <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff fa50 	bl	8000550 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fcfa 	bl	8000ab0 <__aeabi_d2iz>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a31      	ldr	r2, [pc, #196]	@ (8001184 <Get_Temp_Value+0x118>)
 80010c0:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <Get_Temp_Value+0x11c>)
 80010c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f9d7 	bl	800047c <__aeabi_i2d>
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b2e      	ldr	r3, [pc, #184]	@ (800118c <Get_Temp_Value+0x120>)
 80010d4:	f7ff fa3c 	bl	8000550 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4614      	mov	r4, r2
 80010de:	461d      	mov	r5, r3
 80010e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <Get_Temp_Value+0x124>)
 80010e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <Get_Temp_Value+0x118>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f9c4 	bl	800047c <__aeabi_i2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff fb52 	bl	80007a4 <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fcd2 	bl	8000ab0 <__aeabi_d2iz>
 800110c:	4603      	mov	r3, r0
 800110e:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <Get_Temp_Value+0x128>)
 8001110:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <Get_Temp_Value+0x118>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <Get_Temp_Value+0x128>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <Get_Temp_Value+0x12c>)
 800111e:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <Get_Temp_Value+0x12c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3308      	adds	r3, #8
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9a8 	bl	800047c <__aeabi_i2d>
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <Get_Temp_Value+0x130>)
 8001132:	f7ff fb37 	bl	80007a4 <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fcb7 	bl	8000ab0 <__aeabi_d2iz>
 8001142:	4603      	mov	r3, r0
 8001144:	4a16      	ldr	r2, [pc, #88]	@ (80011a0 <Get_Temp_Value+0x134>)
 8001146:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001148:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <Get_Temp_Value+0x134>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f995 	bl	800047c <__aeabi_i2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <Get_Temp_Value+0x138>)
 8001158:	f7ff fb24 	bl	80007a4 <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fcec 	bl	8000b40 <__aeabi_d2f>
 8001168:	4603      	mov	r3, r0
 800116a:	ee07 3a90 	vmov	s15, r3

}
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	bdb0      	pop	{r4, r5, r7, pc}
 8001174:	200000a4 	.word	0x200000a4
 8001178:	20000096 	.word	0x20000096
 800117c:	20000094 	.word	0x20000094
 8001180:	40e00000 	.word	0x40e00000
 8001184:	200000ac 	.word	0x200000ac
 8001188:	2000009e 	.word	0x2000009e
 800118c:	40a00000 	.word	0x40a00000
 8001190:	200000a0 	.word	0x200000a0
 8001194:	200000b0 	.word	0x200000b0
 8001198:	200000bc 	.word	0x200000bc
 800119c:	40300000 	.word	0x40300000
 80011a0:	200000d0 	.word	0x200000d0
 80011a4:	40240000 	.word	0x40240000

080011a8 <Read_UP_Value>:

uint32_t Read_UP_Value(int oss)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	6078      	str	r0, [r7, #4]
	uint8_t datawrite = 0x34 +(oss<<6);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	019b      	lsls	r3, r3, #6
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	3334      	adds	r3, #52	@ 0x34
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	73fb      	strb	r3, [r7, #15]
	uint8_t pressdata[3] ={0};
 80011be:	4b27      	ldr	r3, [pc, #156]	@ (800125c <Read_UP_Value+0xb4>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	81bb      	strh	r3, [r7, #12]
 80011c4:	2300      	movs	r3, #0
 80011c6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDRESS, 0x04, 1, &datawrite, 1, 1000);
 80011c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	2301      	movs	r3, #1
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	f107 030f 	add.w	r3, r7, #15
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	2204      	movs	r2, #4
 80011dc:	21ee      	movs	r1, #238	@ 0xee
 80011de:	4820      	ldr	r0, [pc, #128]	@ (8001260 <Read_UP_Value+0xb8>)
 80011e0:	f001 f904 	bl	80023ec <HAL_I2C_Mem_Write>
	switch (oss) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d81a      	bhi.n	8001220 <Read_UP_Value+0x78>
 80011ea:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <Read_UP_Value+0x48>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	08001201 	.word	0x08001201
 80011f4:	08001209 	.word	0x08001209
 80011f8:	08001211 	.word	0x08001211
 80011fc:	08001219 	.word	0x08001219
		case 0:
			HAL_Delay(5);
 8001200:	2005      	movs	r0, #5
 8001202:	f000 fd07 	bl	8001c14 <HAL_Delay>
			break;
 8001206:	e00b      	b.n	8001220 <Read_UP_Value+0x78>
		case 1:
			HAL_Delay(8);
 8001208:	2008      	movs	r0, #8
 800120a:	f000 fd03 	bl	8001c14 <HAL_Delay>
			break;
 800120e:	e007      	b.n	8001220 <Read_UP_Value+0x78>
		case 2:
			HAL_Delay(14);
 8001210:	200e      	movs	r0, #14
 8001212:	f000 fcff 	bl	8001c14 <HAL_Delay>
			break;
 8001216:	e003      	b.n	8001220 <Read_UP_Value+0x78>

		case 3:
			HAL_Delay(26);
 8001218:	201a      	movs	r0, #26
 800121a:	f000 fcfb 	bl	8001c14 <HAL_Delay>
			break;
 800121e:	bf00      	nop

	}
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDRESS, 0xF6, 1, pressdata, 3, 1000);
 8001220:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2303      	movs	r3, #3
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	22f6      	movs	r2, #246	@ 0xf6
 8001234:	21ee      	movs	r1, #238	@ 0xee
 8001236:	480a      	ldr	r0, [pc, #40]	@ (8001260 <Read_UP_Value+0xb8>)
 8001238:	f001 f9d2 	bl	80025e0 <HAL_I2C_Mem_Read>
	return(((pressdata[0] <<16)+(pressdata[1]<<8)+pressdata[2])>>(8-oss));
 800123c:	7b3b      	ldrb	r3, [r7, #12]
 800123e:	041a      	lsls	r2, r3, #16
 8001240:	7b7b      	ldrb	r3, [r7, #13]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	4413      	add	r3, r2
 8001246:	7bba      	ldrb	r2, [r7, #14]
 8001248:	441a      	add	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f1c3 0308 	rsb	r3, r3, #8
 8001250:	fa42 f303 	asr.w	r3, r2, r3

}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08004970 	.word	0x08004970
 8001260:	200000d4 	.word	0x200000d4

08001264 <Get_Press_value>:

float Get_Press_value(int oss)
{
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	UP = Read_UP_Value(oss);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff9b 	bl	80011a8 <Read_UP_Value>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4ba8      	ldr	r3, [pc, #672]	@ (8001518 <Get_Press_value+0x2b4>)
 8001278:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800127a:	4ba8      	ldr	r3, [pc, #672]	@ (800151c <Get_Press_value+0x2b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4aa8      	ldr	r2, [pc, #672]	@ (8001520 <Get_Press_value+0x2bc>)
 8001280:	8812      	ldrh	r2, [r2, #0]
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8f9 	bl	800047c <__aeabi_i2d>
 800128a:	4604      	mov	r4, r0
 800128c:	460d      	mov	r5, r1
 800128e:	4ba5      	ldr	r3, [pc, #660]	@ (8001524 <Get_Press_value+0x2c0>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f8f2 	bl	800047c <__aeabi_i2d>
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4ba2      	ldr	r3, [pc, #648]	@ (8001528 <Get_Press_value+0x2c4>)
 800129e:	f7ff fa81 	bl	80007a4 <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f951 	bl	8000550 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fbfb 	bl	8000ab0 <__aeabi_d2iz>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a9b      	ldr	r2, [pc, #620]	@ (800152c <Get_Press_value+0x2c8>)
 80012be:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80012c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001530 <Get_Press_value+0x2cc>)
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f8d8 	bl	800047c <__aeabi_i2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b98      	ldr	r3, [pc, #608]	@ (8001534 <Get_Press_value+0x2d0>)
 80012d2:	f7ff f93d 	bl	8000550 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4614      	mov	r4, r2
 80012dc:	461d      	mov	r5, r3
 80012de:	4b96      	ldr	r3, [pc, #600]	@ (8001538 <Get_Press_value+0x2d4>)
 80012e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b91      	ldr	r3, [pc, #580]	@ (800152c <Get_Press_value+0x2c8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f8c5 	bl	800047c <__aeabi_i2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4620      	mov	r0, r4
 80012f8:	4629      	mov	r1, r5
 80012fa:	f7ff fa53 	bl	80007a4 <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fbd3 	bl	8000ab0 <__aeabi_d2iz>
 800130a:	4603      	mov	r3, r0
 800130c:	4a8b      	ldr	r2, [pc, #556]	@ (800153c <Get_Press_value+0x2d8>)
 800130e:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001310:	4b86      	ldr	r3, [pc, #536]	@ (800152c <Get_Press_value+0x2c8>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b89      	ldr	r3, [pc, #548]	@ (800153c <Get_Press_value+0x2d8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4413      	add	r3, r2
 800131a:	4a89      	ldr	r2, [pc, #548]	@ (8001540 <Get_Press_value+0x2dc>)
 800131c:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800131e:	4b88      	ldr	r3, [pc, #544]	@ (8001540 <Get_Press_value+0x2dc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001326:	4a87      	ldr	r2, [pc, #540]	@ (8001544 <Get_Press_value+0x2e0>)
 8001328:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800132a:	4b87      	ldr	r3, [pc, #540]	@ (8001548 <Get_Press_value+0x2e4>)
 800132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f8a3 	bl	800047c <__aeabi_i2d>
 8001336:	4604      	mov	r4, r0
 8001338:	460d      	mov	r5, r1
 800133a:	4b82      	ldr	r3, [pc, #520]	@ (8001544 <Get_Press_value+0x2e0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a81      	ldr	r2, [pc, #516]	@ (8001544 <Get_Press_value+0x2e0>)
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f898 	bl	800047c <__aeabi_i2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b7e      	ldr	r3, [pc, #504]	@ (800154c <Get_Press_value+0x2e8>)
 8001352:	f7ff fa27 	bl	80007a4 <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7ff f8f7 	bl	8000550 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b71      	ldr	r3, [pc, #452]	@ (8001534 <Get_Press_value+0x2d0>)
 8001370:	f7ff fa18 	bl	80007a4 <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fb98 	bl	8000ab0 <__aeabi_d2iz>
 8001380:	4603      	mov	r3, r0
 8001382:	4a6a      	ldr	r2, [pc, #424]	@ (800152c <Get_Press_value+0x2c8>)
 8001384:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001386:	4b72      	ldr	r3, [pc, #456]	@ (8001550 <Get_Press_value+0x2ec>)
 8001388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138c:	461a      	mov	r2, r3
 800138e:	4b6d      	ldr	r3, [pc, #436]	@ (8001544 <Get_Press_value+0x2e0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f870 	bl	800047c <__aeabi_i2d>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b64      	ldr	r3, [pc, #400]	@ (8001534 <Get_Press_value+0x2d0>)
 80013a2:	f7ff f9ff 	bl	80007a4 <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fb7f 	bl	8000ab0 <__aeabi_d2iz>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a61      	ldr	r2, [pc, #388]	@ (800153c <Get_Press_value+0x2d8>)
 80013b6:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80013b8:	4b5c      	ldr	r3, [pc, #368]	@ (800152c <Get_Press_value+0x2c8>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b5f      	ldr	r3, [pc, #380]	@ (800153c <Get_Press_value+0x2d8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a64      	ldr	r2, [pc, #400]	@ (8001554 <Get_Press_value+0x2f0>)
 80013c4:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80013c6:	4b64      	ldr	r3, [pc, #400]	@ (8001558 <Get_Press_value+0x2f4>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	009a      	lsls	r2, r3, #2
 80013ce:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <Get_Press_value+0x2f0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	441a      	add	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	3302      	adds	r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <Get_Press_value+0x17e>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b5d      	ldr	r3, [pc, #372]	@ (800155c <Get_Press_value+0x2f8>)
 80013e8:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80013ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001560 <Get_Press_value+0x2fc>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b54      	ldr	r3, [pc, #336]	@ (8001544 <Get_Press_value+0x2e0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f83e 	bl	800047c <__aeabi_i2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b57      	ldr	r3, [pc, #348]	@ (8001564 <Get_Press_value+0x300>)
 8001406:	f7ff f9cd 	bl	80007a4 <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb4d 	bl	8000ab0 <__aeabi_d2iz>
 8001416:	4603      	mov	r3, r0
 8001418:	4a44      	ldr	r2, [pc, #272]	@ (800152c <Get_Press_value+0x2c8>)
 800141a:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800141c:	4b52      	ldr	r3, [pc, #328]	@ (8001568 <Get_Press_value+0x304>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f82a 	bl	800047c <__aeabi_i2d>
 8001428:	4604      	mov	r4, r0
 800142a:	460d      	mov	r5, r1
 800142c:	4b45      	ldr	r3, [pc, #276]	@ (8001544 <Get_Press_value+0x2e0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a44      	ldr	r2, [pc, #272]	@ (8001544 <Get_Press_value+0x2e0>)
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f81f 	bl	800047c <__aeabi_i2d>
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b42      	ldr	r3, [pc, #264]	@ (800154c <Get_Press_value+0x2e8>)
 8001444:	f7ff f9ae 	bl	80007a4 <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4620      	mov	r0, r4
 800144e:	4629      	mov	r1, r5
 8001450:	f7ff f87e 	bl	8000550 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b42      	ldr	r3, [pc, #264]	@ (800156c <Get_Press_value+0x308>)
 8001462:	f7ff f99f 	bl	80007a4 <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb1f 	bl	8000ab0 <__aeabi_d2iz>
 8001472:	4603      	mov	r3, r0
 8001474:	4a31      	ldr	r2, [pc, #196]	@ (800153c <Get_Press_value+0x2d8>)
 8001476:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001478:	4b2c      	ldr	r3, [pc, #176]	@ (800152c <Get_Press_value+0x2c8>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <Get_Press_value+0x2d8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	3302      	adds	r3, #2
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe fff9 	bl	800047c <__aeabi_i2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <Get_Press_value+0x30c>)
 8001490:	f7ff f988 	bl	80007a4 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb08 	bl	8000ab0 <__aeabi_d2iz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001554 <Get_Press_value+0x2f0>)
 80014a4:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80014a6:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <Get_Press_value+0x310>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <Get_Press_value+0x2f0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffcf 	bl	800045c <__aeabi_ui2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <Get_Press_value+0x2c4>)
 80014c4:	f7ff f96e 	bl	80007a4 <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fb16 	bl	8000b00 <__aeabi_d2uiz>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a28      	ldr	r2, [pc, #160]	@ (8001578 <Get_Press_value+0x314>)
 80014d8:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <Get_Press_value+0x2b4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <Get_Press_value+0x2f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	fa41 f202 	asr.w	r2, r1, r2
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	4a21      	ldr	r2, [pc, #132]	@ (800157c <Get_Press_value+0x318>)
 80014f6:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80014f8:	4b20      	ldr	r3, [pc, #128]	@ (800157c <Get_Press_value+0x318>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db41      	blt.n	8001584 <Get_Press_value+0x320>
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <Get_Press_value+0x318>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	005a      	lsls	r2, r3, #1
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <Get_Press_value+0x314>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	461a      	mov	r2, r3
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <Get_Press_value+0x31c>)
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e040      	b.n	8001598 <Get_Press_value+0x334>
 8001516:	bf00      	nop
 8001518:	200000a8 	.word	0x200000a8
 800151c:	200000a4 	.word	0x200000a4
 8001520:	20000096 	.word	0x20000096
 8001524:	20000094 	.word	0x20000094
 8001528:	40e00000 	.word	0x40e00000
 800152c:	200000ac 	.word	0x200000ac
 8001530:	2000009e 	.word	0x2000009e
 8001534:	40a00000 	.word	0x40a00000
 8001538:	200000a0 	.word	0x200000a0
 800153c:	200000b0 	.word	0x200000b0
 8001540:	200000bc 	.word	0x200000bc
 8001544:	200000c4 	.word	0x200000c4
 8001548:	2000009a 	.word	0x2000009a
 800154c:	40b00000 	.word	0x40b00000
 8001550:	2000008e 	.word	0x2000008e
 8001554:	200000b4 	.word	0x200000b4
 8001558:	2000008c 	.word	0x2000008c
 800155c:	200000b8 	.word	0x200000b8
 8001560:	20000090 	.word	0x20000090
 8001564:	40c00000 	.word	0x40c00000
 8001568:	20000098 	.word	0x20000098
 800156c:	40f00000 	.word	0x40f00000
 8001570:	40100000 	.word	0x40100000
 8001574:	20000092 	.word	0x20000092
 8001578:	200000c0 	.word	0x200000c0
 800157c:	200000c8 	.word	0x200000c8
 8001580:	200000cc 	.word	0x200000cc
	else Press = (B7/B4)*2;
 8001584:	4b46      	ldr	r3, [pc, #280]	@ (80016a0 <Get_Press_value+0x43c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b46      	ldr	r3, [pc, #280]	@ (80016a4 <Get_Press_value+0x440>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	461a      	mov	r2, r3
 8001594:	4b44      	ldr	r3, [pc, #272]	@ (80016a8 <Get_Press_value+0x444>)
 8001596:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001598:	4b43      	ldr	r3, [pc, #268]	@ (80016a8 <Get_Press_value+0x444>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff6d 	bl	800047c <__aeabi_i2d>
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <Get_Press_value+0x448>)
 80015a8:	f7ff f8fc 	bl	80007a4 <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4614      	mov	r4, r2
 80015b2:	461d      	mov	r5, r3
 80015b4:	4b3c      	ldr	r3, [pc, #240]	@ (80016a8 <Get_Press_value+0x444>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff5f 	bl	800047c <__aeabi_i2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b3a      	ldr	r3, [pc, #232]	@ (80016ac <Get_Press_value+0x448>)
 80015c4:	f7ff f8ee 	bl	80007a4 <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe ffbe 	bl	8000550 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fa68 	bl	8000ab0 <__aeabi_d2iz>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a33      	ldr	r2, [pc, #204]	@ (80016b0 <Get_Press_value+0x44c>)
 80015e4:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80015e6:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <Get_Press_value+0x44c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f640 32de 	movw	r2, #3038	@ 0xbde
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff42 	bl	800047c <__aeabi_i2d>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <Get_Press_value+0x450>)
 80015fe:	f7ff f8d1 	bl	80007a4 <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff fa51 	bl	8000ab0 <__aeabi_d2iz>
 800160e:	4603      	mov	r3, r0
 8001610:	4a27      	ldr	r2, [pc, #156]	@ (80016b0 <Get_Press_value+0x44c>)
 8001612:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001614:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <Get_Press_value+0x444>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a27      	ldr	r2, [pc, #156]	@ (80016b8 <Get_Press_value+0x454>)
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff2c 	bl	800047c <__aeabi_i2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <Get_Press_value+0x450>)
 800162a:	f7ff f8bb 	bl	80007a4 <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fa3b 	bl	8000ab0 <__aeabi_d2iz>
 800163a:	4603      	mov	r3, r0
 800163c:	4a1f      	ldr	r2, [pc, #124]	@ (80016bc <Get_Press_value+0x458>)
 800163e:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <Get_Press_value+0x444>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff19 	bl	800047c <__aeabi_i2d>
 800164a:	4604      	mov	r4, r0
 800164c:	460d      	mov	r5, r1
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <Get_Press_value+0x44c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <Get_Press_value+0x458>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff0d 	bl	800047c <__aeabi_i2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <Get_Press_value+0x45c>)
 8001668:	f7ff f89c 	bl	80007a4 <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4620      	mov	r0, r4
 8001672:	4629      	mov	r1, r5
 8001674:	f7fe fdb6 	bl	80001e4 <__adddf3>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fa16 	bl	8000ab0 <__aeabi_d2iz>
 8001684:	4603      	mov	r3, r0
 8001686:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <Get_Press_value+0x444>)
 8001688:	6013      	str	r3, [r2, #0]

	return Press;
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <Get_Press_value+0x444>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	200000c8 	.word	0x200000c8
 80016a4:	200000c0 	.word	0x200000c0
 80016a8:	200000cc 	.word	0x200000cc
 80016ac:	40700000 	.word	0x40700000
 80016b0:	200000ac 	.word	0x200000ac
 80016b4:	40f00000 	.word	0x40f00000
 80016b8:	ffffe343 	.word	0xffffe343
 80016bc:	200000b0 	.word	0x200000b0
 80016c0:	40300000 	.word	0x40300000
 80016c4:	00000000 	.word	0x00000000

080016c8 <BMP180_GetAlt>:

float BMP180_GetAlt(int oss)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	Get_Press_value(oss);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fdc7 	bl	8001264 <Get_Press_value>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <BMP180_GetAlt+0x88>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e2:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001754 <BMP180_GetAlt+0x8c>
 80016e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ea:	ee16 0a90 	vmov	r0, s13
 80016ee:	f7fe fed7 	bl	80004a0 <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001740 <BMP180_GetAlt+0x78>
 80016fa:	ec43 2b10 	vmov	d0, r2, r3
 80016fe:	f002 f9cb 	bl	8003a98 <pow>
 8001702:	ec53 2b10 	vmov	r2, r3, d0
 8001706:	f04f 0000 	mov.w	r0, #0
 800170a:	4913      	ldr	r1, [pc, #76]	@ (8001758 <BMP180_GetAlt+0x90>)
 800170c:	f7fe fd68 	bl	80001e0 <__aeabi_dsub>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	a30b      	add	r3, pc, #44	@ (adr r3, 8001748 <BMP180_GetAlt+0x80>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff17 	bl	8000550 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa09 	bl	8000b40 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	ee07 3a90 	vmov	s15, r3
}
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	ccd745e4 	.word	0xccd745e4
 8001744:	3fc85b95 	.word	0x3fc85b95
 8001748:	00000000 	.word	0x00000000
 800174c:	40e5a540 	.word	0x40e5a540
 8001750:	200000cc 	.word	0x200000cc
 8001754:	47c5e680 	.word	0x47c5e680
 8001758:	3ff00000 	.word	0x3ff00000

0800175c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a1f      	ldr	r2, [pc, #124]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b1d      	ldr	r3, [pc, #116]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a18      	ldr	r2, [pc, #96]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017cc:	480b      	ldr	r0, [pc, #44]	@ (80017fc <MX_GPIO_Init+0xa0>)
 80017ce:	f000 fcaf 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4804      	ldr	r0, [pc, #16]	@ (80017fc <MX_GPIO_Init+0xa0>)
 80017ec:	f000 fb1c 	bl	8001e28 <HAL_GPIO_Init>

}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020800 	.word	0x40020800

08001800 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <MX_I2C1_Init+0x50>)
 8001806:	4a13      	ldr	r2, [pc, #76]	@ (8001854 <MX_I2C1_Init+0x54>)
 8001808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_I2C1_Init+0x50>)
 800180c:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <MX_I2C1_Init+0x58>)
 800180e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_I2C1_Init+0x50>)
 800181e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001830:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	@ (8001850 <MX_I2C1_Init+0x50>)
 800183e:	f000 fc91 	bl	8002164 <HAL_I2C_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001848:	f000 f8d8 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200000d4 	.word	0x200000d4
 8001854:	40005400 	.word	0x40005400
 8001858:	000186a0 	.word	0x000186a0

0800185c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <HAL_I2C_MspInit+0x84>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12b      	bne.n	80018d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <HAL_I2C_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_I2C_MspInit+0x88>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_I2C_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189a:	23c0      	movs	r3, #192	@ 0xc0
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018aa:	2304      	movs	r3, #4
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <HAL_I2C_MspInit+0x8c>)
 80018b6:	f000 fab7 	bl	8001e28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <HAL_I2C_MspInit+0x88>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <HAL_I2C_MspInit+0x88>)
 80018c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_I2C_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	@ 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40005400 	.word	0x40005400
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020400 	.word	0x40020400

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f0:	f000 f91e 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f4:	f000 f826 	bl	8001944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f8:	f7ff ff30 	bl	800175c <MX_GPIO_Init>
  MX_I2C1_Init();
 80018fc:	f7ff ff80 	bl	8001800 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BMP180_Init();
 8001900:	f7ff fae6 	bl	8000ed0 <BMP180_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Temperature = Get_Temp_Value();
 8001904:	f7ff fbb2 	bl	800106c <Get_Temp_Value>
 8001908:	eef0 7a40 	vmov.f32	s15, s0
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <main+0x4c>)
 800190e:	edc3 7a00 	vstr	s15, [r3]

	  Pressure = Get_Press_value(0);
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fca6 	bl	8001264 <Get_Press_value>
 8001918:	eef0 7a40 	vmov.f32	s15, s0
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <main+0x50>)
 800191e:	edc3 7a00 	vstr	s15, [r3]

	  Altitude = BMP180_GetAlt(0);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fed0 	bl	80016c8 <BMP180_GetAlt>
 8001928:	eef0 7a40 	vmov.f32	s15, s0
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <main+0x54>)
 800192e:	edc3 7a00 	vstr	s15, [r3]
	  Temperature = Get_Temp_Value();
 8001932:	bf00      	nop
 8001934:	e7e6      	b.n	8001904 <main+0x18>
 8001936:	bf00      	nop
 8001938:	20000128 	.word	0x20000128
 800193c:	2000012c 	.word	0x2000012c
 8001940:	20000130 	.word	0x20000130

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	@ 0x50
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2230      	movs	r2, #48	@ 0x30
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f002 f86e 	bl	8003a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <SystemClock_Config+0xb0>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a20      	ldr	r2, [pc, #128]	@ (80019f4 <SystemClock_Config+0xb0>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
 8001978:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <SystemClock_Config+0xb0>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <SystemClock_Config+0xb4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1a      	ldr	r2, [pc, #104]	@ (80019f8 <SystemClock_Config+0xb4>)
 800198e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <SystemClock_Config+0xb4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fbfa 	bl	80031ac <HAL_RCC_OscConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80019be:	f000 f81d 	bl	80019fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c2:	230f      	movs	r3, #15
 80019c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 fe5d 	bl	800369c <HAL_RCC_ClockConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80019e8:	f000 f808 	bl	80019fc <Error_Handler>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3750      	adds	r7, #80	@ 0x50
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a00:	b672      	cpsid	i
}
 8001a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <Error_Handler+0x8>

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a0f      	ldr	r2, [pc, #60]	@ (8001a54 <HAL_MspInit+0x4c>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <HAL_MspInit+0x4c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <NMI_Handler+0x4>

08001a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <MemManage_Handler+0x4>

08001a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f000 f891 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae0:	f7ff ffea 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae6:	490d      	ldr	r1, [pc, #52]	@ (8001b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001afc:	4c0a      	ldr	r4, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f001 ffa1 	bl	8003a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0e:	f7ff feed 	bl	80018ec <main>
  bx  lr    
 8001b12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b20:	080049d0 	.word	0x080049d0
  ldr r2, =_sbss
 8001b24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b28:	20000270 	.word	0x20000270

08001b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b34:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	@ (8001b70 <HAL_Init+0x40>)
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_Init+0x40>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <HAL_Init+0x40>)
 8001b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f931 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	200f      	movs	r0, #15
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff ff50 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f93b 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 f911 	bl	8001dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	@ (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_IncTick+0x20>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000134 	.word	0x20000134

08001bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <HAL_GetTick+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000134 	.word	0x20000134

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff ffee 	bl	8001bfc <HAL_GetTick>
 8001c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_Delay+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3a:	bf00      	nop
 8001c3c:	f7ff ffde 	bl	8001bfc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	@ (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	@ (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	@ 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff47 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff5c 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffb0 	bl	8001d7c <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e159      	b.n	80020f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 8148 	bne.w	80020f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d130      	bne.n	8001edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a2 	beq.w	80020f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b57      	ldr	r3, [pc, #348]	@ (8002110 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a56      	ldr	r2, [pc, #344]	@ (8002110 <HAL_GPIO_Init+0x2e8>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbe:	4b54      	ldr	r3, [pc, #336]	@ (8002110 <HAL_GPIO_Init+0x2e8>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fca:	4a52      	ldr	r2, [pc, #328]	@ (8002114 <HAL_GPIO_Init+0x2ec>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a49      	ldr	r2, [pc, #292]	@ (8002118 <HAL_GPIO_Init+0x2f0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_GPIO_Init+0x202>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a48      	ldr	r2, [pc, #288]	@ (800211c <HAL_GPIO_Init+0x2f4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x1fe>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a47      	ldr	r2, [pc, #284]	@ (8002120 <HAL_GPIO_Init+0x2f8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x1fa>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a46      	ldr	r2, [pc, #280]	@ (8002124 <HAL_GPIO_Init+0x2fc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x1f6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a45      	ldr	r2, [pc, #276]	@ (8002128 <HAL_GPIO_Init+0x300>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x1f2>
 8002016:	2304      	movs	r3, #4
 8002018:	e008      	b.n	800202c <HAL_GPIO_Init+0x204>
 800201a:	2307      	movs	r3, #7
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x204>
 800201e:	2303      	movs	r3, #3
 8002020:	e004      	b.n	800202c <HAL_GPIO_Init+0x204>
 8002022:	2302      	movs	r3, #2
 8002024:	e002      	b.n	800202c <HAL_GPIO_Init+0x204>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x204>
 800202a:	2300      	movs	r3, #0
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f002 0203 	and.w	r2, r2, #3
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4093      	lsls	r3, r2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800203c:	4935      	ldr	r1, [pc, #212]	@ (8002114 <HAL_GPIO_Init+0x2ec>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b38      	ldr	r3, [pc, #224]	@ (800212c <HAL_GPIO_Init+0x304>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a2f      	ldr	r2, [pc, #188]	@ (800212c <HAL_GPIO_Init+0x304>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_GPIO_Init+0x304>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a24      	ldr	r2, [pc, #144]	@ (800212c <HAL_GPIO_Init+0x304>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209e:	4b23      	ldr	r3, [pc, #140]	@ (800212c <HAL_GPIO_Init+0x304>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c2:	4a1a      	ldr	r2, [pc, #104]	@ (800212c <HAL_GPIO_Init+0x304>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c8:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_GPIO_Init+0x304>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ec:	4a0f      	ldr	r2, [pc, #60]	@ (800212c <HAL_GPIO_Init+0x304>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	f67f aea2 	bls.w	8001e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3724      	adds	r7, #36	@ 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40013c00 	.word	0x40013c00

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800214c:	e003      	b.n	8002156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e12b      	b.n	80023ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fb66 	bl	800185c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	@ 0x24
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c8:	f001 fc20 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a81      	ldr	r2, [pc, #516]	@ (80023d8 <HAL_I2C_Init+0x274>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d807      	bhi.n	80021e8 <HAL_I2C_Init+0x84>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a80      	ldr	r2, [pc, #512]	@ (80023dc <HAL_I2C_Init+0x278>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e006      	b.n	80021f6 <HAL_I2C_Init+0x92>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a7d      	ldr	r2, [pc, #500]	@ (80023e0 <HAL_I2C_Init+0x27c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0e7      	b.n	80023ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a78      	ldr	r2, [pc, #480]	@ (80023e4 <HAL_I2C_Init+0x280>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a6a      	ldr	r2, [pc, #424]	@ (80023d8 <HAL_I2C_Init+0x274>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d802      	bhi.n	8002238 <HAL_I2C_Init+0xd4>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	e009      	b.n	800224c <HAL_I2C_Init+0xe8>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	4a69      	ldr	r2, [pc, #420]	@ (80023e8 <HAL_I2C_Init+0x284>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	3301      	adds	r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800225e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	495c      	ldr	r1, [pc, #368]	@ (80023d8 <HAL_I2C_Init+0x274>)
 8002268:	428b      	cmp	r3, r1
 800226a:	d819      	bhi.n	80022a0 <HAL_I2C_Init+0x13c>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e59      	subs	r1, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fbb1 f3f3 	udiv	r3, r1, r3
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002280:	400b      	ands	r3, r1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_I2C_Init+0x138>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e59      	subs	r1, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fbb1 f3f3 	udiv	r3, r1, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229a:	e051      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 800229c:	2304      	movs	r3, #4
 800229e:	e04f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_I2C_Init+0x168>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e012      	b.n	80022f2 <HAL_I2C_Init+0x18e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	0099      	lsls	r1, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x196>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e022      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <HAL_I2C_Init+0x1bc>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e58      	subs	r0, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	440b      	add	r3, r1
 8002310:	fbb0 f3f3 	udiv	r3, r0, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800231e:	e00f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	6809      	ldr	r1, [r1, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800236e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6911      	ldr	r1, [r2, #16]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	000186a0 	.word	0x000186a0
 80023dc:	001e847f 	.word	0x001e847f
 80023e0:	003d08ff 	.word	0x003d08ff
 80023e4:	431bde83 	.word	0x431bde83
 80023e8:	10624dd3 	.word	0x10624dd3

080023ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	817b      	strh	r3, [r7, #10]
 80023fe:	460b      	mov	r3, r1
 8002400:	813b      	strh	r3, [r7, #8]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002406:	f7ff fbf9 	bl	8001bfc <HAL_GetTick>
 800240a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b20      	cmp	r3, #32
 8002416:	f040 80d9 	bne.w	80025cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2319      	movs	r3, #25
 8002420:	2201      	movs	r2, #1
 8002422:	496d      	ldr	r1, [pc, #436]	@ (80025d8 <HAL_I2C_Mem_Write+0x1ec>)
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fc8b 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
 8002432:	e0cc      	b.n	80025ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_I2C_Mem_Write+0x56>
 800243e:	2302      	movs	r3, #2
 8002440:	e0c5      	b.n	80025ce <HAL_I2C_Mem_Write+0x1e2>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d007      	beq.n	8002468 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2221      	movs	r2, #33	@ 0x21
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2240      	movs	r2, #64	@ 0x40
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002498:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a4d      	ldr	r2, [pc, #308]	@ (80025dc <HAL_I2C_Mem_Write+0x1f0>)
 80024a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024aa:	88f8      	ldrh	r0, [r7, #6]
 80024ac:	893a      	ldrh	r2, [r7, #8]
 80024ae:	8979      	ldrh	r1, [r7, #10]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4603      	mov	r3, r0
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fac2 	bl	8002a44 <I2C_RequestMemoryWrite>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d052      	beq.n	800256c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e081      	b.n	80025ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fd50 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00d      	beq.n	80024f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d107      	bne.n	80024f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06b      	b.n	80025ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11b      	bne.n	800256c <HAL_I2C_Mem_Write+0x180>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	d017      	beq.n	800256c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1aa      	bne.n	80024ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fd43 	bl	8003004 <I2C_WaitOnBTFFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00d      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	2b04      	cmp	r3, #4
 800258a:	d107      	bne.n	800259c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e016      	b.n	80025ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e000      	b.n	80025ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	00100002 	.word	0x00100002
 80025dc:	ffff0000 	.word	0xffff0000

080025e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	@ 0x30
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	460b      	mov	r3, r1
 80025f4:	813b      	strh	r3, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025fa:	f7ff faff 	bl	8001bfc <HAL_GetTick>
 80025fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b20      	cmp	r3, #32
 800260a:	f040 8214 	bne.w	8002a36 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2319      	movs	r3, #25
 8002614:	2201      	movs	r2, #1
 8002616:	497b      	ldr	r1, [pc, #492]	@ (8002804 <HAL_I2C_Mem_Read+0x224>)
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fb91 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
 8002626:	e207      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_I2C_Mem_Read+0x56>
 8002632:	2302      	movs	r3, #2
 8002634:	e200      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d007      	beq.n	800265c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2222      	movs	r2, #34	@ 0x22
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2240      	movs	r2, #64	@ 0x40
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800268c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a5b      	ldr	r2, [pc, #364]	@ (8002808 <HAL_I2C_Mem_Read+0x228>)
 800269c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800269e:	88f8      	ldrh	r0, [r7, #6]
 80026a0:	893a      	ldrh	r2, [r7, #8]
 80026a2:	8979      	ldrh	r1, [r7, #10]
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	4603      	mov	r3, r0
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fa5e 	bl	8002b70 <I2C_RequestMemoryRead>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e1bc      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d113      	bne.n	80026ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e190      	b.n	8002a10 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d11b      	bne.n	800272e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e170      	b.n	8002a10 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002732:	2b02      	cmp	r3, #2
 8002734:	d11b      	bne.n	800276e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002744:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	e150      	b.n	8002a10 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002784:	e144      	b.n	8002a10 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	2b03      	cmp	r3, #3
 800278c:	f200 80f1 	bhi.w	8002972 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	2b01      	cmp	r3, #1
 8002796:	d123      	bne.n	80027e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fc79 	bl	8003094 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e145      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027de:	e117      	b.n	8002a10 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d14e      	bne.n	8002886 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ee:	2200      	movs	r2, #0
 80027f0:	4906      	ldr	r1, [pc, #24]	@ (800280c <HAL_I2C_Mem_Read+0x22c>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 faa4 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e11a      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
 8002802:	bf00      	nop
 8002804:	00100002 	.word	0x00100002
 8002808:	ffff0000 	.word	0xffff0000
 800280c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002884:	e0c4      	b.n	8002a10 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288c:	2200      	movs	r2, #0
 800288e:	496c      	ldr	r1, [pc, #432]	@ (8002a40 <HAL_I2C_Mem_Read+0x460>)
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fa55 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0cb      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e8:	2200      	movs	r2, #0
 80028ea:	4955      	ldr	r1, [pc, #340]	@ (8002a40 <HAL_I2C_Mem_Read+0x460>)
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fa27 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e09d      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002970:	e04e      	b.n	8002a10 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fb8c 	bl	8003094 <I2C_WaitOnRXNEFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e058      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d124      	bne.n	8002a10 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d107      	bne.n	80029de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f47f aeb6 	bne.w	8002786 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3728      	adds	r7, #40	@ 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	00010004 	.word	0x00010004

08002a44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	460b      	mov	r3, r1
 8002a58:	813b      	strh	r3, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f960 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a94:	d103      	bne.n	8002a9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e05f      	b.n	8002b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aa2:	897b      	ldrh	r3, [r7, #10]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	492d      	ldr	r1, [pc, #180]	@ (8002b6c <I2C_RequestMemoryWrite+0x128>)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f9bb 	bl	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e04c      	b.n	8002b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae0:	6a39      	ldr	r1, [r7, #32]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fa46 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d107      	bne.n	8002b06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e02b      	b.n	8002b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b10:	893b      	ldrh	r3, [r7, #8]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	611a      	str	r2, [r3, #16]
 8002b1a:	e021      	b.n	8002b60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b1c:	893b      	ldrh	r3, [r7, #8]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fa20 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d107      	bne.n	8002b52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e005      	b.n	8002b62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b56:	893b      	ldrh	r3, [r7, #8]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	00010002 	.word	0x00010002

08002b70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	460b      	mov	r3, r1
 8002b84:	813b      	strh	r3, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f8c2 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd0:	d103      	bne.n	8002bda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0aa      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	4952      	ldr	r1, [pc, #328]	@ (8002d3c <I2C_RequestMemoryRead+0x1cc>)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f91d 	bl	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e097      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1c:	6a39      	ldr	r1, [r7, #32]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f9a8 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d107      	bne.n	8002c42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e076      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4c:	893b      	ldrh	r3, [r7, #8]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	611a      	str	r2, [r3, #16]
 8002c56:	e021      	b.n	8002c9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c58:	893b      	ldrh	r3, [r7, #8]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c68:	6a39      	ldr	r1, [r7, #32]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f982 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d107      	bne.n	8002c8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e050      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c92:	893b      	ldrh	r3, [r7, #8]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9e:	6a39      	ldr	r1, [r7, #32]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f967 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d107      	bne.n	8002cc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e035      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f82b 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cfe:	d103      	bne.n	8002d08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e013      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d0c:	897b      	ldrh	r3, [r7, #10]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	6a3a      	ldr	r2, [r7, #32]
 8002d20:	4906      	ldr	r1, [pc, #24]	@ (8002d3c <I2C_RequestMemoryRead+0x1cc>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f886 	bl	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	00010002 	.word	0x00010002

08002d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d50:	e048      	b.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d044      	beq.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fe ff4f 	bl	8001bfc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d139      	bne.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10d      	bne.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	e00c      	b.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d116      	bne.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e023      	b.n	8002e2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10d      	bne.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	43da      	mvns	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	e00c      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d093      	beq.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e42:	e071      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e52:	d123      	bne.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e067      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d041      	beq.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7fe feaa 	bl	8001bfc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d136      	bne.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10c      	bne.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	e00b      	b.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e021      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10c      	bne.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e00b      	b.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f af6d 	bne.w	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f80:	e034      	b.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f8e3 	bl	800314e <I2C_IsAcknowledgeFailed>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e034      	b.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d028      	beq.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fe fe2f 	bl	8001bfc <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d11d      	bne.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b80      	cmp	r3, #128	@ 0x80
 8002fbc:	d016      	beq.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e007      	b.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff6:	2b80      	cmp	r3, #128	@ 0x80
 8002ff8:	d1c3      	bne.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003010:	e034      	b.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f89b 	bl	800314e <I2C_IsAcknowledgeFailed>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e034      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d028      	beq.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fe fde7 	bl	8001bfc <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11d      	bne.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d016      	beq.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e007      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d1c3      	bne.n	8003012 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a0:	e049      	b.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d119      	bne.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0210 	mvn.w	r2, #16
 80030b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e030      	b.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fe fd8a 	bl	8001bfc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d11d      	bne.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	d016      	beq.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	d1ae      	bne.n	80030a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003164:	d11b      	bne.n	800319e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800316e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e267      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d075      	beq.n	80032b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031ca:	4b88      	ldr	r3, [pc, #544]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d00c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d6:	4b85      	ldr	r3, [pc, #532]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d112      	bne.n	8003208 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e2:	4b82      	ldr	r3, [pc, #520]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ee:	d10b      	bne.n	8003208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	4b7e      	ldr	r3, [pc, #504]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05b      	beq.n	80032b4 <HAL_RCC_OscConfig+0x108>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d157      	bne.n	80032b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e242      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x74>
 8003212:	4b76      	ldr	r3, [pc, #472]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a75      	ldr	r2, [pc, #468]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xb0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x98>
 800322a:	4b70      	ldr	r3, [pc, #448]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6f      	ldr	r2, [pc, #444]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b6d      	ldr	r3, [pc, #436]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6c      	ldr	r2, [pc, #432]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xb0>
 8003244:	4b69      	ldr	r3, [pc, #420]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a68      	ldr	r2, [pc, #416]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b66      	ldr	r3, [pc, #408]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a65      	ldr	r2, [pc, #404]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fcca 	bl	8001bfc <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fcc6 	bl	8001bfc <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e207      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b5b      	ldr	r3, [pc, #364]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xc0>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe fcb6 	bl	8001bfc <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe fcb2 	bl	8001bfc <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	@ 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1f3      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b51      	ldr	r3, [pc, #324]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0xe8>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032c2:	4b4a      	ldr	r3, [pc, #296]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b47      	ldr	r3, [pc, #284]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032da:	4b44      	ldr	r3, [pc, #272]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b41      	ldr	r3, [pc, #260]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x152>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1c7      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b3b      	ldr	r3, [pc, #236]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4937      	ldr	r1, [pc, #220]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e03a      	b.n	800338a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b34      	ldr	r3, [pc, #208]	@ (80033f0 <HAL_RCC_OscConfig+0x244>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe fc6b 	bl	8001bfc <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332a:	f7fe fc67 	bl	8001bfc <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e1a8      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	4b2b      	ldr	r3, [pc, #172]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b28      	ldr	r3, [pc, #160]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4925      	ldr	r1, [pc, #148]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335e:	4b24      	ldr	r3, [pc, #144]	@ (80033f0 <HAL_RCC_OscConfig+0x244>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fc4a 	bl	8001bfc <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336c:	f7fe fc46 	bl	8001bfc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e187      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d036      	beq.n	8003404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <HAL_RCC_OscConfig+0x248>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe fc2a 	bl	8001bfc <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fe fc26 	bl	8001bfc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e167      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_RCC_OscConfig+0x240>)
 80033c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x200>
 80033ca:	e01b      	b.n	8003404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033cc:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <HAL_RCC_OscConfig+0x248>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d2:	f7fe fc13 	bl	8001bfc <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	e00e      	b.n	80033f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033da:	f7fe fc0f 	bl	8001bfc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d907      	bls.n	80033f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e150      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
 80033ec:	40023800 	.word	0x40023800
 80033f0:	42470000 	.word	0x42470000
 80033f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	4b88      	ldr	r3, [pc, #544]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ea      	bne.n	80033da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8097 	beq.w	8003540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003416:	4b81      	ldr	r3, [pc, #516]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10f      	bne.n	8003442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	4b7d      	ldr	r3, [pc, #500]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	4a7c      	ldr	r2, [pc, #496]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	@ 0x40
 8003432:	4b7a      	ldr	r3, [pc, #488]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b77      	ldr	r3, [pc, #476]	@ (8003620 <HAL_RCC_OscConfig+0x474>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b74      	ldr	r3, [pc, #464]	@ (8003620 <HAL_RCC_OscConfig+0x474>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a73      	ldr	r2, [pc, #460]	@ (8003620 <HAL_RCC_OscConfig+0x474>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fe fbcf 	bl	8001bfc <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fe fbcb 	bl	8001bfc <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e10c      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b6a      	ldr	r3, [pc, #424]	@ (8003620 <HAL_RCC_OscConfig+0x474>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x2ea>
 8003488:	4b64      	ldr	r3, [pc, #400]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	4a63      	ldr	r2, [pc, #396]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6713      	str	r3, [r2, #112]	@ 0x70
 8003494:	e01c      	b.n	80034d0 <HAL_RCC_OscConfig+0x324>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x30c>
 800349e:	4b5f      	ldr	r3, [pc, #380]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a2:	4a5e      	ldr	r2, [pc, #376]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034aa:	4b5c      	ldr	r3, [pc, #368]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	4a5b      	ldr	r2, [pc, #364]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0x324>
 80034b8:	4b58      	ldr	r3, [pc, #352]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034bc:	4a57      	ldr	r2, [pc, #348]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c4:	4b55      	ldr	r3, [pc, #340]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	4a54      	ldr	r2, [pc, #336]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 0304 	bic.w	r3, r3, #4
 80034ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d015      	beq.n	8003504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fe fb90 	bl	8001bfc <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fe fb8c 	bl	8001bfc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e0cb      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4b49      	ldr	r3, [pc, #292]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ee      	beq.n	80034e0 <HAL_RCC_OscConfig+0x334>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7fe fb7a 	bl	8001bfc <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fe fb76 	bl	8001bfc <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0b5      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003522:	4b3e      	ldr	r3, [pc, #248]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ee      	bne.n	800350c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b39      	ldr	r3, [pc, #228]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	4a38      	ldr	r2, [pc, #224]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800353a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a1 	beq.w	800368c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354a:	4b34      	ldr	r3, [pc, #208]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b08      	cmp	r3, #8
 8003554:	d05c      	beq.n	8003610 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d141      	bne.n	80035e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <HAL_RCC_OscConfig+0x478>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fe fb4a 	bl	8001bfc <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356c:	f7fe fb46 	bl	8001bfc <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e087      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	4b27      	ldr	r3, [pc, #156]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	019b      	lsls	r3, r3, #6
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	3b01      	subs	r3, #1
 80035a4:	041b      	lsls	r3, r3, #16
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	491b      	ldr	r1, [pc, #108]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_RCC_OscConfig+0x478>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ba:	f7fe fb1f 	bl	8001bfc <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fe fb1b 	bl	8001bfc <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e05c      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d4:	4b11      	ldr	r3, [pc, #68]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x416>
 80035e0:	e054      	b.n	800368c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b10      	ldr	r3, [pc, #64]	@ (8003624 <HAL_RCC_OscConfig+0x478>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe fb08 	bl	8001bfc <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe fb04 	bl	8001bfc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e045      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b06      	ldr	r3, [pc, #24]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x444>
 800360e:	e03d      	b.n	800368c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e038      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
 800361c:	40023800 	.word	0x40023800
 8003620:	40007000 	.word	0x40007000
 8003624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003628:	4b1b      	ldr	r3, [pc, #108]	@ (8003698 <HAL_RCC_OscConfig+0x4ec>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d028      	beq.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d121      	bne.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d11a      	bne.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800365e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	3b01      	subs	r3, #1
 8003672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0cc      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b68      	ldr	r3, [pc, #416]	@ (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d90c      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b65      	ldr	r3, [pc, #404]	@ (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b63      	ldr	r3, [pc, #396]	@ (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0b8      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f0:	4b59      	ldr	r3, [pc, #356]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a58      	ldr	r2, [pc, #352]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003708:	4b53      	ldr	r3, [pc, #332]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a52      	ldr	r2, [pc, #328]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b50      	ldr	r3, [pc, #320]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	494d      	ldr	r1, [pc, #308]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d044      	beq.n	80037bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b47      	ldr	r3, [pc, #284]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d119      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003756:	2b03      	cmp	r3, #3
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b3f      	ldr	r3, [pc, #252]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e06f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b3b      	ldr	r3, [pc, #236]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e067      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b37      	ldr	r3, [pc, #220]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4934      	ldr	r1, [pc, #208]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378c:	f7fe fa36 	bl	8001bfc <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe fa32 	bl	8001bfc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e04f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b25      	ldr	r3, [pc, #148]	@ (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d20c      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b22      	ldr	r3, [pc, #136]	@ (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e032      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4916      	ldr	r1, [pc, #88]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380e:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	490e      	ldr	r1, [pc, #56]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003822:	f000 f821 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003826:	4602      	mov	r2, r0
 8003828:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	490a      	ldr	r1, [pc, #40]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a09      	ldr	r2, [pc, #36]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe f996 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023c00 	.word	0x40023c00
 8003858:	40023800 	.word	0x40023800
 800385c:	08004974 	.word	0x08004974
 8003860:	20000000 	.word	0x20000000
 8003864:	20000004 	.word	0x20000004

08003868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b090      	sub	sp, #64	@ 0x40
 800386e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003880:	4b59      	ldr	r3, [pc, #356]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b08      	cmp	r3, #8
 800388a:	d00d      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x40>
 800388c:	2b08      	cmp	r3, #8
 800388e:	f200 80a1 	bhi.w	80039d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x34>
 8003896:	2b04      	cmp	r3, #4
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800389a:	e09b      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b53      	ldr	r3, [pc, #332]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x184>)
 800389e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038a0:	e09b      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a2:	4b53      	ldr	r3, [pc, #332]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038a6:	e098      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a8:	4b4f      	ldr	r3, [pc, #316]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b2:	4b4d      	ldr	r3, [pc, #308]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d028      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038be:	4b4a      	ldr	r3, [pc, #296]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	2200      	movs	r2, #0
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038d0:	2100      	movs	r1, #0
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038d4:	fb03 f201 	mul.w	r2, r3, r1
 80038d8:	2300      	movs	r3, #0
 80038da:	fb00 f303 	mul.w	r3, r0, r3
 80038de:	4413      	add	r3, r2
 80038e0:	4a43      	ldr	r2, [pc, #268]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038e2:	fba0 1202 	umull	r1, r2, r0, r2
 80038e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038e8:	460a      	mov	r2, r1
 80038ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ee:	4413      	add	r3, r2
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f4:	2200      	movs	r2, #0
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	61fa      	str	r2, [r7, #28]
 80038fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003902:	f7fd f96d 	bl	8000be0 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4613      	mov	r3, r2
 800390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800390e:	e053      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003910:	4b35      	ldr	r3, [pc, #212]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	2200      	movs	r2, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	617a      	str	r2, [r7, #20]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003922:	f04f 0b00 	mov.w	fp, #0
 8003926:	4652      	mov	r2, sl
 8003928:	465b      	mov	r3, fp
 800392a:	f04f 0000 	mov.w	r0, #0
 800392e:	f04f 0100 	mov.w	r1, #0
 8003932:	0159      	lsls	r1, r3, #5
 8003934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003938:	0150      	lsls	r0, r2, #5
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	ebb2 080a 	subs.w	r8, r2, sl
 8003942:	eb63 090b 	sbc.w	r9, r3, fp
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003952:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003956:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800395a:	ebb2 0408 	subs.w	r4, r2, r8
 800395e:	eb63 0509 	sbc.w	r5, r3, r9
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	00eb      	lsls	r3, r5, #3
 800396c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003970:	00e2      	lsls	r2, r4, #3
 8003972:	4614      	mov	r4, r2
 8003974:	461d      	mov	r5, r3
 8003976:	eb14 030a 	adds.w	r3, r4, sl
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	eb45 030b 	adc.w	r3, r5, fp
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800398e:	4629      	mov	r1, r5
 8003990:	028b      	lsls	r3, r1, #10
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003998:	4621      	mov	r1, r4
 800399a:	028a      	lsls	r2, r1, #10
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a2:	2200      	movs	r2, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	60fa      	str	r2, [r7, #12]
 80039a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ac:	f7fd f918 	bl	8000be0 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	3301      	adds	r3, #1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80039c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x184>)
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3740      	adds	r7, #64	@ 0x40
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	017d7840 	.word	0x017d7840

080039f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b03      	ldr	r3, [pc, #12]	@ (8003a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000000 	.word	0x20000000

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a10:	f7ff fff0 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0a9b      	lsrs	r3, r3, #10
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	@ (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	08004984 	.word	0x08004984

08003a34 <memset>:
 8003a34:	4402      	add	r2, r0
 8003a36:	4603      	mov	r3, r0
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <memset+0xa>
 8003a3c:	4770      	bx	lr
 8003a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a42:	e7f9      	b.n	8003a38 <memset+0x4>

08003a44 <__errno>:
 8003a44:	4b01      	ldr	r3, [pc, #4]	@ (8003a4c <__errno+0x8>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	2000000c 	.word	0x2000000c

08003a50 <__libc_init_array>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4d0d      	ldr	r5, [pc, #52]	@ (8003a88 <__libc_init_array+0x38>)
 8003a54:	4c0d      	ldr	r4, [pc, #52]	@ (8003a8c <__libc_init_array+0x3c>)
 8003a56:	1b64      	subs	r4, r4, r5
 8003a58:	10a4      	asrs	r4, r4, #2
 8003a5a:	2600      	movs	r6, #0
 8003a5c:	42a6      	cmp	r6, r4
 8003a5e:	d109      	bne.n	8003a74 <__libc_init_array+0x24>
 8003a60:	4d0b      	ldr	r5, [pc, #44]	@ (8003a90 <__libc_init_array+0x40>)
 8003a62:	4c0c      	ldr	r4, [pc, #48]	@ (8003a94 <__libc_init_array+0x44>)
 8003a64:	f000 ff76 	bl	8004954 <_init>
 8003a68:	1b64      	subs	r4, r4, r5
 8003a6a:	10a4      	asrs	r4, r4, #2
 8003a6c:	2600      	movs	r6, #0
 8003a6e:	42a6      	cmp	r6, r4
 8003a70:	d105      	bne.n	8003a7e <__libc_init_array+0x2e>
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a78:	4798      	blx	r3
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	e7ee      	b.n	8003a5c <__libc_init_array+0xc>
 8003a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a82:	4798      	blx	r3
 8003a84:	3601      	adds	r6, #1
 8003a86:	e7f2      	b.n	8003a6e <__libc_init_array+0x1e>
 8003a88:	080049c8 	.word	0x080049c8
 8003a8c:	080049c8 	.word	0x080049c8
 8003a90:	080049c8 	.word	0x080049c8
 8003a94:	080049cc 	.word	0x080049cc

08003a98 <pow>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	ed2d 8b02 	vpush	{d8}
 8003a9e:	eeb0 8a40 	vmov.f32	s16, s0
 8003aa2:	eef0 8a60 	vmov.f32	s17, s1
 8003aa6:	ec55 4b11 	vmov	r4, r5, d1
 8003aaa:	f000 f871 	bl	8003b90 <__ieee754_pow>
 8003aae:	4622      	mov	r2, r4
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	ec57 6b10 	vmov	r6, r7, d0
 8003aba:	f7fc ffe3 	bl	8000a84 <__aeabi_dcmpun>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d13b      	bne.n	8003b3a <pow+0xa2>
 8003ac2:	ec51 0b18 	vmov	r0, r1, d8
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f7fc ffa9 	bl	8000a20 <__aeabi_dcmpeq>
 8003ace:	b1b8      	cbz	r0, 8003b00 <pow+0x68>
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc ffa2 	bl	8000a20 <__aeabi_dcmpeq>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d146      	bne.n	8003b6e <pow+0xd6>
 8003ae0:	ec45 4b10 	vmov	d0, r4, r5
 8003ae4:	f000 f848 	bl	8003b78 <finite>
 8003ae8:	b338      	cbz	r0, 8003b3a <pow+0xa2>
 8003aea:	2200      	movs	r2, #0
 8003aec:	2300      	movs	r3, #0
 8003aee:	4620      	mov	r0, r4
 8003af0:	4629      	mov	r1, r5
 8003af2:	f7fc ff9f 	bl	8000a34 <__aeabi_dcmplt>
 8003af6:	b300      	cbz	r0, 8003b3a <pow+0xa2>
 8003af8:	f7ff ffa4 	bl	8003a44 <__errno>
 8003afc:	2322      	movs	r3, #34	@ 0x22
 8003afe:	e01b      	b.n	8003b38 <pow+0xa0>
 8003b00:	ec47 6b10 	vmov	d0, r6, r7
 8003b04:	f000 f838 	bl	8003b78 <finite>
 8003b08:	b9e0      	cbnz	r0, 8003b44 <pow+0xac>
 8003b0a:	eeb0 0a48 	vmov.f32	s0, s16
 8003b0e:	eef0 0a68 	vmov.f32	s1, s17
 8003b12:	f000 f831 	bl	8003b78 <finite>
 8003b16:	b1a8      	cbz	r0, 8003b44 <pow+0xac>
 8003b18:	ec45 4b10 	vmov	d0, r4, r5
 8003b1c:	f000 f82c 	bl	8003b78 <finite>
 8003b20:	b180      	cbz	r0, 8003b44 <pow+0xac>
 8003b22:	4632      	mov	r2, r6
 8003b24:	463b      	mov	r3, r7
 8003b26:	4630      	mov	r0, r6
 8003b28:	4639      	mov	r1, r7
 8003b2a:	f7fc ffab 	bl	8000a84 <__aeabi_dcmpun>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d0e2      	beq.n	8003af8 <pow+0x60>
 8003b32:	f7ff ff87 	bl	8003a44 <__errno>
 8003b36:	2321      	movs	r3, #33	@ 0x21
 8003b38:	6003      	str	r3, [r0, #0]
 8003b3a:	ecbd 8b02 	vpop	{d8}
 8003b3e:	ec47 6b10 	vmov	d0, r6, r7
 8003b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b44:	2200      	movs	r2, #0
 8003b46:	2300      	movs	r3, #0
 8003b48:	4630      	mov	r0, r6
 8003b4a:	4639      	mov	r1, r7
 8003b4c:	f7fc ff68 	bl	8000a20 <__aeabi_dcmpeq>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d0f2      	beq.n	8003b3a <pow+0xa2>
 8003b54:	eeb0 0a48 	vmov.f32	s0, s16
 8003b58:	eef0 0a68 	vmov.f32	s1, s17
 8003b5c:	f000 f80c 	bl	8003b78 <finite>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0ea      	beq.n	8003b3a <pow+0xa2>
 8003b64:	ec45 4b10 	vmov	d0, r4, r5
 8003b68:	f000 f806 	bl	8003b78 <finite>
 8003b6c:	e7c3      	b.n	8003af6 <pow+0x5e>
 8003b6e:	4f01      	ldr	r7, [pc, #4]	@ (8003b74 <pow+0xdc>)
 8003b70:	2600      	movs	r6, #0
 8003b72:	e7e2      	b.n	8003b3a <pow+0xa2>
 8003b74:	3ff00000 	.word	0x3ff00000

08003b78 <finite>:
 8003b78:	b082      	sub	sp, #8
 8003b7a:	ed8d 0b00 	vstr	d0, [sp]
 8003b7e:	9801      	ldr	r0, [sp, #4]
 8003b80:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003b84:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003b88:	0fc0      	lsrs	r0, r0, #31
 8003b8a:	b002      	add	sp, #8
 8003b8c:	4770      	bx	lr
	...

08003b90 <__ieee754_pow>:
 8003b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b94:	b091      	sub	sp, #68	@ 0x44
 8003b96:	ed8d 1b00 	vstr	d1, [sp]
 8003b9a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8003b9e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8003ba2:	ea5a 0001 	orrs.w	r0, sl, r1
 8003ba6:	ec57 6b10 	vmov	r6, r7, d0
 8003baa:	d113      	bne.n	8003bd4 <__ieee754_pow+0x44>
 8003bac:	19b3      	adds	r3, r6, r6
 8003bae:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8003bb2:	4152      	adcs	r2, r2
 8003bb4:	4298      	cmp	r0, r3
 8003bb6:	4b98      	ldr	r3, [pc, #608]	@ (8003e18 <__ieee754_pow+0x288>)
 8003bb8:	4193      	sbcs	r3, r2
 8003bba:	f080 84ea 	bcs.w	8004592 <__ieee754_pow+0xa02>
 8003bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	4639      	mov	r1, r7
 8003bc6:	f7fc fb0d 	bl	80001e4 <__adddf3>
 8003bca:	ec41 0b10 	vmov	d0, r0, r1
 8003bce:	b011      	add	sp, #68	@ 0x44
 8003bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd4:	4a91      	ldr	r2, [pc, #580]	@ (8003e1c <__ieee754_pow+0x28c>)
 8003bd6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003bda:	4590      	cmp	r8, r2
 8003bdc:	463d      	mov	r5, r7
 8003bde:	4633      	mov	r3, r6
 8003be0:	d806      	bhi.n	8003bf0 <__ieee754_pow+0x60>
 8003be2:	d101      	bne.n	8003be8 <__ieee754_pow+0x58>
 8003be4:	2e00      	cmp	r6, #0
 8003be6:	d1ea      	bne.n	8003bbe <__ieee754_pow+0x2e>
 8003be8:	4592      	cmp	sl, r2
 8003bea:	d801      	bhi.n	8003bf0 <__ieee754_pow+0x60>
 8003bec:	d10e      	bne.n	8003c0c <__ieee754_pow+0x7c>
 8003bee:	b169      	cbz	r1, 8003c0c <__ieee754_pow+0x7c>
 8003bf0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8003bf4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003bf8:	431d      	orrs	r5, r3
 8003bfa:	d1e0      	bne.n	8003bbe <__ieee754_pow+0x2e>
 8003bfc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003c00:	18db      	adds	r3, r3, r3
 8003c02:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003c06:	4152      	adcs	r2, r2
 8003c08:	429d      	cmp	r5, r3
 8003c0a:	e7d4      	b.n	8003bb6 <__ieee754_pow+0x26>
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	46c3      	mov	fp, r8
 8003c10:	da3a      	bge.n	8003c88 <__ieee754_pow+0xf8>
 8003c12:	4a83      	ldr	r2, [pc, #524]	@ (8003e20 <__ieee754_pow+0x290>)
 8003c14:	4592      	cmp	sl, r2
 8003c16:	d84d      	bhi.n	8003cb4 <__ieee754_pow+0x124>
 8003c18:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8003c1c:	4592      	cmp	sl, r2
 8003c1e:	f240 84c7 	bls.w	80045b0 <__ieee754_pow+0xa20>
 8003c22:	ea4f 522a 	mov.w	r2, sl, asr #20
 8003c26:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003c2a:	2a14      	cmp	r2, #20
 8003c2c:	dd0f      	ble.n	8003c4e <__ieee754_pow+0xbe>
 8003c2e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8003c32:	fa21 f402 	lsr.w	r4, r1, r2
 8003c36:	fa04 f202 	lsl.w	r2, r4, r2
 8003c3a:	428a      	cmp	r2, r1
 8003c3c:	f040 84b8 	bne.w	80045b0 <__ieee754_pow+0xa20>
 8003c40:	f004 0401 	and.w	r4, r4, #1
 8003c44:	f1c4 0402 	rsb	r4, r4, #2
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	d158      	bne.n	8003cfe <__ieee754_pow+0x16e>
 8003c4c:	e00e      	b.n	8003c6c <__ieee754_pow+0xdc>
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	d154      	bne.n	8003cfc <__ieee754_pow+0x16c>
 8003c52:	f1c2 0214 	rsb	r2, r2, #20
 8003c56:	fa4a f402 	asr.w	r4, sl, r2
 8003c5a:	fa04 f202 	lsl.w	r2, r4, r2
 8003c5e:	4552      	cmp	r2, sl
 8003c60:	f040 84a3 	bne.w	80045aa <__ieee754_pow+0xa1a>
 8003c64:	f004 0401 	and.w	r4, r4, #1
 8003c68:	f1c4 0402 	rsb	r4, r4, #2
 8003c6c:	4a6d      	ldr	r2, [pc, #436]	@ (8003e24 <__ieee754_pow+0x294>)
 8003c6e:	4592      	cmp	sl, r2
 8003c70:	d12e      	bne.n	8003cd0 <__ieee754_pow+0x140>
 8003c72:	f1b9 0f00 	cmp.w	r9, #0
 8003c76:	f280 8494 	bge.w	80045a2 <__ieee754_pow+0xa12>
 8003c7a:	496a      	ldr	r1, [pc, #424]	@ (8003e24 <__ieee754_pow+0x294>)
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	463b      	mov	r3, r7
 8003c80:	2000      	movs	r0, #0
 8003c82:	f7fc fd8f 	bl	80007a4 <__aeabi_ddiv>
 8003c86:	e7a0      	b.n	8003bca <__ieee754_pow+0x3a>
 8003c88:	2400      	movs	r4, #0
 8003c8a:	bbc1      	cbnz	r1, 8003cfe <__ieee754_pow+0x16e>
 8003c8c:	4a63      	ldr	r2, [pc, #396]	@ (8003e1c <__ieee754_pow+0x28c>)
 8003c8e:	4592      	cmp	sl, r2
 8003c90:	d1ec      	bne.n	8003c6c <__ieee754_pow+0xdc>
 8003c92:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8003c96:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	f000 8479 	beq.w	8004592 <__ieee754_pow+0xa02>
 8003ca0:	4b61      	ldr	r3, [pc, #388]	@ (8003e28 <__ieee754_pow+0x298>)
 8003ca2:	4598      	cmp	r8, r3
 8003ca4:	d908      	bls.n	8003cb8 <__ieee754_pow+0x128>
 8003ca6:	f1b9 0f00 	cmp.w	r9, #0
 8003caa:	f2c0 8476 	blt.w	800459a <__ieee754_pow+0xa0a>
 8003cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cb2:	e78a      	b.n	8003bca <__ieee754_pow+0x3a>
 8003cb4:	2402      	movs	r4, #2
 8003cb6:	e7e8      	b.n	8003c8a <__ieee754_pow+0xfa>
 8003cb8:	f1b9 0f00 	cmp.w	r9, #0
 8003cbc:	f04f 0000 	mov.w	r0, #0
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	da81      	bge.n	8003bca <__ieee754_pow+0x3a>
 8003cc6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003cca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003cce:	e77c      	b.n	8003bca <__ieee754_pow+0x3a>
 8003cd0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003cd4:	d106      	bne.n	8003ce4 <__ieee754_pow+0x154>
 8003cd6:	4632      	mov	r2, r6
 8003cd8:	463b      	mov	r3, r7
 8003cda:	4630      	mov	r0, r6
 8003cdc:	4639      	mov	r1, r7
 8003cde:	f7fc fc37 	bl	8000550 <__aeabi_dmul>
 8003ce2:	e772      	b.n	8003bca <__ieee754_pow+0x3a>
 8003ce4:	4a51      	ldr	r2, [pc, #324]	@ (8003e2c <__ieee754_pow+0x29c>)
 8003ce6:	4591      	cmp	r9, r2
 8003ce8:	d109      	bne.n	8003cfe <__ieee754_pow+0x16e>
 8003cea:	2d00      	cmp	r5, #0
 8003cec:	db07      	blt.n	8003cfe <__ieee754_pow+0x16e>
 8003cee:	ec47 6b10 	vmov	d0, r6, r7
 8003cf2:	b011      	add	sp, #68	@ 0x44
 8003cf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf8:	f000 bd52 	b.w	80047a0 <__ieee754_sqrt>
 8003cfc:	2400      	movs	r4, #0
 8003cfe:	ec47 6b10 	vmov	d0, r6, r7
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	f000 fc88 	bl	8004618 <fabs>
 8003d08:	9b02      	ldr	r3, [sp, #8]
 8003d0a:	ec51 0b10 	vmov	r0, r1, d0
 8003d0e:	bb53      	cbnz	r3, 8003d66 <__ieee754_pow+0x1d6>
 8003d10:	4b44      	ldr	r3, [pc, #272]	@ (8003e24 <__ieee754_pow+0x294>)
 8003d12:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d002      	beq.n	8003d20 <__ieee754_pow+0x190>
 8003d1a:	f1b8 0f00 	cmp.w	r8, #0
 8003d1e:	d122      	bne.n	8003d66 <__ieee754_pow+0x1d6>
 8003d20:	f1b9 0f00 	cmp.w	r9, #0
 8003d24:	da05      	bge.n	8003d32 <__ieee754_pow+0x1a2>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	493d      	ldr	r1, [pc, #244]	@ (8003e24 <__ieee754_pow+0x294>)
 8003d2e:	f7fc fd39 	bl	80007a4 <__aeabi_ddiv>
 8003d32:	2d00      	cmp	r5, #0
 8003d34:	f6bf af49 	bge.w	8003bca <__ieee754_pow+0x3a>
 8003d38:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8003d3c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003d40:	ea58 0804 	orrs.w	r8, r8, r4
 8003d44:	d108      	bne.n	8003d58 <__ieee754_pow+0x1c8>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7fc fa47 	bl	80001e0 <__aeabi_dsub>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	e794      	b.n	8003c82 <__ieee754_pow+0xf2>
 8003d58:	2c01      	cmp	r4, #1
 8003d5a:	f47f af36 	bne.w	8003bca <__ieee754_pow+0x3a>
 8003d5e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003d62:	4619      	mov	r1, r3
 8003d64:	e731      	b.n	8003bca <__ieee754_pow+0x3a>
 8003d66:	0feb      	lsrs	r3, r5, #31
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	ea53 0204 	orrs.w	r2, r3, r4
 8003d6e:	d102      	bne.n	8003d76 <__ieee754_pow+0x1e6>
 8003d70:	4632      	mov	r2, r6
 8003d72:	463b      	mov	r3, r7
 8003d74:	e7e9      	b.n	8003d4a <__ieee754_pow+0x1ba>
 8003d76:	3c01      	subs	r4, #1
 8003d78:	431c      	orrs	r4, r3
 8003d7a:	d016      	beq.n	8003daa <__ieee754_pow+0x21a>
 8003d7c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8003e08 <__ieee754_pow+0x278>
 8003d80:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8003d84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003d88:	f240 8112 	bls.w	8003fb0 <__ieee754_pow+0x420>
 8003d8c:	4b28      	ldr	r3, [pc, #160]	@ (8003e30 <__ieee754_pow+0x2a0>)
 8003d8e:	459a      	cmp	sl, r3
 8003d90:	4b25      	ldr	r3, [pc, #148]	@ (8003e28 <__ieee754_pow+0x298>)
 8003d92:	d916      	bls.n	8003dc2 <__ieee754_pow+0x232>
 8003d94:	4598      	cmp	r8, r3
 8003d96:	d80b      	bhi.n	8003db0 <__ieee754_pow+0x220>
 8003d98:	f1b9 0f00 	cmp.w	r9, #0
 8003d9c:	da0b      	bge.n	8003db6 <__ieee754_pow+0x226>
 8003d9e:	2000      	movs	r0, #0
 8003da0:	b011      	add	sp, #68	@ 0x44
 8003da2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da6:	f000 bcf3 	b.w	8004790 <__math_oflow>
 8003daa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8003e10 <__ieee754_pow+0x280>
 8003dae:	e7e7      	b.n	8003d80 <__ieee754_pow+0x1f0>
 8003db0:	f1b9 0f00 	cmp.w	r9, #0
 8003db4:	dcf3      	bgt.n	8003d9e <__ieee754_pow+0x20e>
 8003db6:	2000      	movs	r0, #0
 8003db8:	b011      	add	sp, #68	@ 0x44
 8003dba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbe:	f000 bcdf 	b.w	8004780 <__math_uflow>
 8003dc2:	4598      	cmp	r8, r3
 8003dc4:	d20c      	bcs.n	8003de0 <__ieee754_pow+0x250>
 8003dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f7fc fe31 	bl	8000a34 <__aeabi_dcmplt>
 8003dd2:	3800      	subs	r0, #0
 8003dd4:	bf18      	it	ne
 8003dd6:	2001      	movne	r0, #1
 8003dd8:	f1b9 0f00 	cmp.w	r9, #0
 8003ddc:	daec      	bge.n	8003db8 <__ieee754_pow+0x228>
 8003dde:	e7df      	b.n	8003da0 <__ieee754_pow+0x210>
 8003de0:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <__ieee754_pow+0x294>)
 8003de2:	4598      	cmp	r8, r3
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	d924      	bls.n	8003e34 <__ieee754_pow+0x2a4>
 8003dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dee:	2300      	movs	r3, #0
 8003df0:	f7fc fe20 	bl	8000a34 <__aeabi_dcmplt>
 8003df4:	3800      	subs	r0, #0
 8003df6:	bf18      	it	ne
 8003df8:	2001      	movne	r0, #1
 8003dfa:	f1b9 0f00 	cmp.w	r9, #0
 8003dfe:	dccf      	bgt.n	8003da0 <__ieee754_pow+0x210>
 8003e00:	e7da      	b.n	8003db8 <__ieee754_pow+0x228>
 8003e02:	bf00      	nop
 8003e04:	f3af 8000 	nop.w
 8003e08:	00000000 	.word	0x00000000
 8003e0c:	3ff00000 	.word	0x3ff00000
 8003e10:	00000000 	.word	0x00000000
 8003e14:	bff00000 	.word	0xbff00000
 8003e18:	fff00000 	.word	0xfff00000
 8003e1c:	7ff00000 	.word	0x7ff00000
 8003e20:	433fffff 	.word	0x433fffff
 8003e24:	3ff00000 	.word	0x3ff00000
 8003e28:	3fefffff 	.word	0x3fefffff
 8003e2c:	3fe00000 	.word	0x3fe00000
 8003e30:	43f00000 	.word	0x43f00000
 8003e34:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa0 <__ieee754_pow+0x410>)
 8003e36:	f7fc f9d3 	bl	80001e0 <__aeabi_dsub>
 8003e3a:	a351      	add	r3, pc, #324	@ (adr r3, 8003f80 <__ieee754_pow+0x3f0>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	4604      	mov	r4, r0
 8003e42:	460d      	mov	r5, r1
 8003e44:	f7fc fb84 	bl	8000550 <__aeabi_dmul>
 8003e48:	a34f      	add	r3, pc, #316	@ (adr r3, 8003f88 <__ieee754_pow+0x3f8>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	4606      	mov	r6, r0
 8003e50:	460f      	mov	r7, r1
 8003e52:	4620      	mov	r0, r4
 8003e54:	4629      	mov	r1, r5
 8003e56:	f7fc fb7b 	bl	8000550 <__aeabi_dmul>
 8003e5a:	4b52      	ldr	r3, [pc, #328]	@ (8003fa4 <__ieee754_pow+0x414>)
 8003e5c:	4682      	mov	sl, r0
 8003e5e:	468b      	mov	fp, r1
 8003e60:	2200      	movs	r2, #0
 8003e62:	4620      	mov	r0, r4
 8003e64:	4629      	mov	r1, r5
 8003e66:	f7fc fb73 	bl	8000550 <__aeabi_dmul>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	a148      	add	r1, pc, #288	@ (adr r1, 8003f90 <__ieee754_pow+0x400>)
 8003e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e74:	f7fc f9b4 	bl	80001e0 <__aeabi_dsub>
 8003e78:	4622      	mov	r2, r4
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	f7fc fb68 	bl	8000550 <__aeabi_dmul>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	2000      	movs	r0, #0
 8003e86:	4948      	ldr	r1, [pc, #288]	@ (8003fa8 <__ieee754_pow+0x418>)
 8003e88:	f7fc f9aa 	bl	80001e0 <__aeabi_dsub>
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	4680      	mov	r8, r0
 8003e90:	4689      	mov	r9, r1
 8003e92:	462b      	mov	r3, r5
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc fb5a 	bl	8000550 <__aeabi_dmul>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	f7fc fb54 	bl	8000550 <__aeabi_dmul>
 8003ea8:	a33b      	add	r3, pc, #236	@ (adr r3, 8003f98 <__ieee754_pow+0x408>)
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc fb4f 	bl	8000550 <__aeabi_dmul>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	4659      	mov	r1, fp
 8003eba:	f7fc f991 	bl	80001e0 <__aeabi_dsub>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	4689      	mov	r9, r1
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	4639      	mov	r1, r7
 8003eca:	f7fc f98b 	bl	80001e4 <__adddf3>
 8003ece:	2400      	movs	r4, #0
 8003ed0:	4632      	mov	r2, r6
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	f7fc f982 	bl	80001e0 <__aeabi_dsub>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	f7fc f97c 	bl	80001e0 <__aeabi_dsub>
 8003ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003ef8:	4606      	mov	r6, r0
 8003efa:	460f      	mov	r7, r1
 8003efc:	4652      	mov	r2, sl
 8003efe:	465b      	mov	r3, fp
 8003f00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f04:	f7fc f96c 	bl	80001e0 <__aeabi_dsub>
 8003f08:	4622      	mov	r2, r4
 8003f0a:	462b      	mov	r3, r5
 8003f0c:	f7fc fb20 	bl	8000550 <__aeabi_dmul>
 8003f10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f14:	4680      	mov	r8, r0
 8003f16:	4689      	mov	r9, r1
 8003f18:	4630      	mov	r0, r6
 8003f1a:	4639      	mov	r1, r7
 8003f1c:	f7fc fb18 	bl	8000550 <__aeabi_dmul>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4640      	mov	r0, r8
 8003f26:	4649      	mov	r1, r9
 8003f28:	f7fc f95c 	bl	80001e4 <__adddf3>
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	465b      	mov	r3, fp
 8003f30:	4606      	mov	r6, r0
 8003f32:	460f      	mov	r7, r1
 8003f34:	4620      	mov	r0, r4
 8003f36:	4629      	mov	r1, r5
 8003f38:	f7fc fb0a 	bl	8000550 <__aeabi_dmul>
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4680      	mov	r8, r0
 8003f42:	4689      	mov	r9, r1
 8003f44:	4630      	mov	r0, r6
 8003f46:	4639      	mov	r1, r7
 8003f48:	f7fc f94c 	bl	80001e4 <__adddf3>
 8003f4c:	4b17      	ldr	r3, [pc, #92]	@ (8003fac <__ieee754_pow+0x41c>)
 8003f4e:	4299      	cmp	r1, r3
 8003f50:	4604      	mov	r4, r0
 8003f52:	460d      	mov	r5, r1
 8003f54:	468a      	mov	sl, r1
 8003f56:	468b      	mov	fp, r1
 8003f58:	f340 82ef 	ble.w	800453a <__ieee754_pow+0x9aa>
 8003f5c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003f60:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003f64:	4303      	orrs	r3, r0
 8003f66:	f000 81e8 	beq.w	800433a <__ieee754_pow+0x7aa>
 8003f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2300      	movs	r3, #0
 8003f72:	f7fc fd5f 	bl	8000a34 <__aeabi_dcmplt>
 8003f76:	3800      	subs	r0, #0
 8003f78:	bf18      	it	ne
 8003f7a:	2001      	movne	r0, #1
 8003f7c:	e710      	b.n	8003da0 <__ieee754_pow+0x210>
 8003f7e:	bf00      	nop
 8003f80:	60000000 	.word	0x60000000
 8003f84:	3ff71547 	.word	0x3ff71547
 8003f88:	f85ddf44 	.word	0xf85ddf44
 8003f8c:	3e54ae0b 	.word	0x3e54ae0b
 8003f90:	55555555 	.word	0x55555555
 8003f94:	3fd55555 	.word	0x3fd55555
 8003f98:	652b82fe 	.word	0x652b82fe
 8003f9c:	3ff71547 	.word	0x3ff71547
 8003fa0:	3ff00000 	.word	0x3ff00000
 8003fa4:	3fd00000 	.word	0x3fd00000
 8003fa8:	3fe00000 	.word	0x3fe00000
 8003fac:	408fffff 	.word	0x408fffff
 8003fb0:	4bd5      	ldr	r3, [pc, #852]	@ (8004308 <__ieee754_pow+0x778>)
 8003fb2:	402b      	ands	r3, r5
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	b92b      	cbnz	r3, 8003fc4 <__ieee754_pow+0x434>
 8003fb8:	4bd4      	ldr	r3, [pc, #848]	@ (800430c <__ieee754_pow+0x77c>)
 8003fba:	f7fc fac9 	bl	8000550 <__aeabi_dmul>
 8003fbe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8003fc2:	468b      	mov	fp, r1
 8003fc4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8003fc8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8003fcc:	4413      	add	r3, r2
 8003fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8003fd0:	4bcf      	ldr	r3, [pc, #828]	@ (8004310 <__ieee754_pow+0x780>)
 8003fd2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8003fd6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8003fda:	459b      	cmp	fp, r3
 8003fdc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8003fe0:	dd08      	ble.n	8003ff4 <__ieee754_pow+0x464>
 8003fe2:	4bcc      	ldr	r3, [pc, #816]	@ (8004314 <__ieee754_pow+0x784>)
 8003fe4:	459b      	cmp	fp, r3
 8003fe6:	f340 81a5 	ble.w	8004334 <__ieee754_pow+0x7a4>
 8003fea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fec:	3301      	adds	r3, #1
 8003fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ff0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003ff4:	f04f 0a00 	mov.w	sl, #0
 8003ff8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ffe:	4bc6      	ldr	r3, [pc, #792]	@ (8004318 <__ieee754_pow+0x788>)
 8004000:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004004:	ed93 7b00 	vldr	d7, [r3]
 8004008:	4629      	mov	r1, r5
 800400a:	ec53 2b17 	vmov	r2, r3, d7
 800400e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004012:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004016:	f7fc f8e3 	bl	80001e0 <__aeabi_dsub>
 800401a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800401e:	4606      	mov	r6, r0
 8004020:	460f      	mov	r7, r1
 8004022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004026:	f7fc f8dd 	bl	80001e4 <__adddf3>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	2000      	movs	r0, #0
 8004030:	49ba      	ldr	r1, [pc, #744]	@ (800431c <__ieee754_pow+0x78c>)
 8004032:	f7fc fbb7 	bl	80007a4 <__aeabi_ddiv>
 8004036:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4630      	mov	r0, r6
 8004040:	4639      	mov	r1, r7
 8004042:	f7fc fa85 	bl	8000550 <__aeabi_dmul>
 8004046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800404a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800404e:	106d      	asrs	r5, r5, #1
 8004050:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004054:	f04f 0b00 	mov.w	fp, #0
 8004058:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800405c:	4661      	mov	r1, ip
 800405e:	2200      	movs	r2, #0
 8004060:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004064:	4658      	mov	r0, fp
 8004066:	46e1      	mov	r9, ip
 8004068:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800406c:	4614      	mov	r4, r2
 800406e:	461d      	mov	r5, r3
 8004070:	f7fc fa6e 	bl	8000550 <__aeabi_dmul>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4630      	mov	r0, r6
 800407a:	4639      	mov	r1, r7
 800407c:	f7fc f8b0 	bl	80001e0 <__aeabi_dsub>
 8004080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004084:	4606      	mov	r6, r0
 8004086:	460f      	mov	r7, r1
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc f8a8 	bl	80001e0 <__aeabi_dsub>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004098:	f7fc f8a2 	bl	80001e0 <__aeabi_dsub>
 800409c:	465a      	mov	r2, fp
 800409e:	464b      	mov	r3, r9
 80040a0:	f7fc fa56 	bl	8000550 <__aeabi_dmul>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4630      	mov	r0, r6
 80040aa:	4639      	mov	r1, r7
 80040ac:	f7fc f898 	bl	80001e0 <__aeabi_dsub>
 80040b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80040b4:	f7fc fa4c 	bl	8000550 <__aeabi_dmul>
 80040b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040c0:	4610      	mov	r0, r2
 80040c2:	4619      	mov	r1, r3
 80040c4:	f7fc fa44 	bl	8000550 <__aeabi_dmul>
 80040c8:	a37d      	add	r3, pc, #500	@ (adr r3, 80042c0 <__ieee754_pow+0x730>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	4604      	mov	r4, r0
 80040d0:	460d      	mov	r5, r1
 80040d2:	f7fc fa3d 	bl	8000550 <__aeabi_dmul>
 80040d6:	a37c      	add	r3, pc, #496	@ (adr r3, 80042c8 <__ieee754_pow+0x738>)
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f7fc f882 	bl	80001e4 <__adddf3>
 80040e0:	4622      	mov	r2, r4
 80040e2:	462b      	mov	r3, r5
 80040e4:	f7fc fa34 	bl	8000550 <__aeabi_dmul>
 80040e8:	a379      	add	r3, pc, #484	@ (adr r3, 80042d0 <__ieee754_pow+0x740>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f7fc f879 	bl	80001e4 <__adddf3>
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	f7fc fa2b 	bl	8000550 <__aeabi_dmul>
 80040fa:	a377      	add	r3, pc, #476	@ (adr r3, 80042d8 <__ieee754_pow+0x748>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc f870 	bl	80001e4 <__adddf3>
 8004104:	4622      	mov	r2, r4
 8004106:	462b      	mov	r3, r5
 8004108:	f7fc fa22 	bl	8000550 <__aeabi_dmul>
 800410c:	a374      	add	r3, pc, #464	@ (adr r3, 80042e0 <__ieee754_pow+0x750>)
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f7fc f867 	bl	80001e4 <__adddf3>
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	f7fc fa19 	bl	8000550 <__aeabi_dmul>
 800411e:	a372      	add	r3, pc, #456	@ (adr r3, 80042e8 <__ieee754_pow+0x758>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc f85e 	bl	80001e4 <__adddf3>
 8004128:	4622      	mov	r2, r4
 800412a:	4606      	mov	r6, r0
 800412c:	460f      	mov	r7, r1
 800412e:	462b      	mov	r3, r5
 8004130:	4620      	mov	r0, r4
 8004132:	4629      	mov	r1, r5
 8004134:	f7fc fa0c 	bl	8000550 <__aeabi_dmul>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4630      	mov	r0, r6
 800413e:	4639      	mov	r1, r7
 8004140:	f7fc fa06 	bl	8000550 <__aeabi_dmul>
 8004144:	465a      	mov	r2, fp
 8004146:	4604      	mov	r4, r0
 8004148:	460d      	mov	r5, r1
 800414a:	464b      	mov	r3, r9
 800414c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004150:	f7fc f848 	bl	80001e4 <__adddf3>
 8004154:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004158:	f7fc f9fa 	bl	8000550 <__aeabi_dmul>
 800415c:	4622      	mov	r2, r4
 800415e:	462b      	mov	r3, r5
 8004160:	f7fc f840 	bl	80001e4 <__adddf3>
 8004164:	465a      	mov	r2, fp
 8004166:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800416a:	464b      	mov	r3, r9
 800416c:	4658      	mov	r0, fp
 800416e:	4649      	mov	r1, r9
 8004170:	f7fc f9ee 	bl	8000550 <__aeabi_dmul>
 8004174:	4b6a      	ldr	r3, [pc, #424]	@ (8004320 <__ieee754_pow+0x790>)
 8004176:	2200      	movs	r2, #0
 8004178:	4606      	mov	r6, r0
 800417a:	460f      	mov	r7, r1
 800417c:	f7fc f832 	bl	80001e4 <__adddf3>
 8004180:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004184:	f7fc f82e 	bl	80001e4 <__adddf3>
 8004188:	46d8      	mov	r8, fp
 800418a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800418e:	460d      	mov	r5, r1
 8004190:	465a      	mov	r2, fp
 8004192:	460b      	mov	r3, r1
 8004194:	4640      	mov	r0, r8
 8004196:	4649      	mov	r1, r9
 8004198:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800419c:	f7fc f9d8 	bl	8000550 <__aeabi_dmul>
 80041a0:	465c      	mov	r4, fp
 80041a2:	4680      	mov	r8, r0
 80041a4:	4689      	mov	r9, r1
 80041a6:	4b5e      	ldr	r3, [pc, #376]	@ (8004320 <__ieee754_pow+0x790>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	4620      	mov	r0, r4
 80041ac:	4629      	mov	r1, r5
 80041ae:	f7fc f817 	bl	80001e0 <__aeabi_dsub>
 80041b2:	4632      	mov	r2, r6
 80041b4:	463b      	mov	r3, r7
 80041b6:	f7fc f813 	bl	80001e0 <__aeabi_dsub>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041c2:	f7fc f80d 	bl	80001e0 <__aeabi_dsub>
 80041c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041ca:	f7fc f9c1 	bl	8000550 <__aeabi_dmul>
 80041ce:	4622      	mov	r2, r4
 80041d0:	4606      	mov	r6, r0
 80041d2:	460f      	mov	r7, r1
 80041d4:	462b      	mov	r3, r5
 80041d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041da:	f7fc f9b9 	bl	8000550 <__aeabi_dmul>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4630      	mov	r0, r6
 80041e4:	4639      	mov	r1, r7
 80041e6:	f7fb fffd 	bl	80001e4 <__adddf3>
 80041ea:	4606      	mov	r6, r0
 80041ec:	460f      	mov	r7, r1
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4640      	mov	r0, r8
 80041f4:	4649      	mov	r1, r9
 80041f6:	f7fb fff5 	bl	80001e4 <__adddf3>
 80041fa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80041fe:	a33c      	add	r3, pc, #240	@ (adr r3, 80042f0 <__ieee754_pow+0x760>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	4658      	mov	r0, fp
 8004206:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800420a:	460d      	mov	r5, r1
 800420c:	f7fc f9a0 	bl	8000550 <__aeabi_dmul>
 8004210:	465c      	mov	r4, fp
 8004212:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004216:	4642      	mov	r2, r8
 8004218:	464b      	mov	r3, r9
 800421a:	4620      	mov	r0, r4
 800421c:	4629      	mov	r1, r5
 800421e:	f7fb ffdf 	bl	80001e0 <__aeabi_dsub>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4630      	mov	r0, r6
 8004228:	4639      	mov	r1, r7
 800422a:	f7fb ffd9 	bl	80001e0 <__aeabi_dsub>
 800422e:	a332      	add	r3, pc, #200	@ (adr r3, 80042f8 <__ieee754_pow+0x768>)
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f7fc f98c 	bl	8000550 <__aeabi_dmul>
 8004238:	a331      	add	r3, pc, #196	@ (adr r3, 8004300 <__ieee754_pow+0x770>)
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	4606      	mov	r6, r0
 8004240:	460f      	mov	r7, r1
 8004242:	4620      	mov	r0, r4
 8004244:	4629      	mov	r1, r5
 8004246:	f7fc f983 	bl	8000550 <__aeabi_dmul>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4630      	mov	r0, r6
 8004250:	4639      	mov	r1, r7
 8004252:	f7fb ffc7 	bl	80001e4 <__adddf3>
 8004256:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004258:	4b32      	ldr	r3, [pc, #200]	@ (8004324 <__ieee754_pow+0x794>)
 800425a:	4413      	add	r3, r2
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fb ffc0 	bl	80001e4 <__adddf3>
 8004264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004268:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800426a:	f7fc f907 	bl	800047c <__aeabi_i2d>
 800426e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004270:	4b2d      	ldr	r3, [pc, #180]	@ (8004328 <__ieee754_pow+0x798>)
 8004272:	4413      	add	r3, r2
 8004274:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004278:	4606      	mov	r6, r0
 800427a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800427e:	460f      	mov	r7, r1
 8004280:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004284:	f7fb ffae 	bl	80001e4 <__adddf3>
 8004288:	4642      	mov	r2, r8
 800428a:	464b      	mov	r3, r9
 800428c:	f7fb ffaa 	bl	80001e4 <__adddf3>
 8004290:	4632      	mov	r2, r6
 8004292:	463b      	mov	r3, r7
 8004294:	f7fb ffa6 	bl	80001e4 <__adddf3>
 8004298:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800429c:	4632      	mov	r2, r6
 800429e:	463b      	mov	r3, r7
 80042a0:	4658      	mov	r0, fp
 80042a2:	460d      	mov	r5, r1
 80042a4:	f7fb ff9c 	bl	80001e0 <__aeabi_dsub>
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	f7fb ff98 	bl	80001e0 <__aeabi_dsub>
 80042b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042b4:	f7fb ff94 	bl	80001e0 <__aeabi_dsub>
 80042b8:	465c      	mov	r4, fp
 80042ba:	4602      	mov	r2, r0
 80042bc:	e036      	b.n	800432c <__ieee754_pow+0x79c>
 80042be:	bf00      	nop
 80042c0:	4a454eef 	.word	0x4a454eef
 80042c4:	3fca7e28 	.word	0x3fca7e28
 80042c8:	93c9db65 	.word	0x93c9db65
 80042cc:	3fcd864a 	.word	0x3fcd864a
 80042d0:	a91d4101 	.word	0xa91d4101
 80042d4:	3fd17460 	.word	0x3fd17460
 80042d8:	518f264d 	.word	0x518f264d
 80042dc:	3fd55555 	.word	0x3fd55555
 80042e0:	db6fabff 	.word	0xdb6fabff
 80042e4:	3fdb6db6 	.word	0x3fdb6db6
 80042e8:	33333303 	.word	0x33333303
 80042ec:	3fe33333 	.word	0x3fe33333
 80042f0:	e0000000 	.word	0xe0000000
 80042f4:	3feec709 	.word	0x3feec709
 80042f8:	dc3a03fd 	.word	0xdc3a03fd
 80042fc:	3feec709 	.word	0x3feec709
 8004300:	145b01f5 	.word	0x145b01f5
 8004304:	be3e2fe0 	.word	0xbe3e2fe0
 8004308:	7ff00000 	.word	0x7ff00000
 800430c:	43400000 	.word	0x43400000
 8004310:	0003988e 	.word	0x0003988e
 8004314:	000bb679 	.word	0x000bb679
 8004318:	080049b0 	.word	0x080049b0
 800431c:	3ff00000 	.word	0x3ff00000
 8004320:	40080000 	.word	0x40080000
 8004324:	08004990 	.word	0x08004990
 8004328:	080049a0 	.word	0x080049a0
 800432c:	460b      	mov	r3, r1
 800432e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004332:	e5d7      	b.n	8003ee4 <__ieee754_pow+0x354>
 8004334:	f04f 0a01 	mov.w	sl, #1
 8004338:	e65e      	b.n	8003ff8 <__ieee754_pow+0x468>
 800433a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800460c <__ieee754_pow+0xa7c>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	4630      	mov	r0, r6
 8004342:	4639      	mov	r1, r7
 8004344:	f7fb ff4e 	bl	80001e4 <__adddf3>
 8004348:	4642      	mov	r2, r8
 800434a:	e9cd 0100 	strd	r0, r1, [sp]
 800434e:	464b      	mov	r3, r9
 8004350:	4620      	mov	r0, r4
 8004352:	4629      	mov	r1, r5
 8004354:	f7fb ff44 	bl	80001e0 <__aeabi_dsub>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004360:	f7fc fb86 	bl	8000a70 <__aeabi_dcmpgt>
 8004364:	2800      	cmp	r0, #0
 8004366:	f47f ae00 	bne.w	8003f6a <__ieee754_pow+0x3da>
 800436a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800436e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004372:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8004376:	fa43 fa0a 	asr.w	sl, r3, sl
 800437a:	44da      	add	sl, fp
 800437c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004380:	489d      	ldr	r0, [pc, #628]	@ (80045f8 <__ieee754_pow+0xa68>)
 8004382:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004386:	4108      	asrs	r0, r1
 8004388:	ea00 030a 	and.w	r3, r0, sl
 800438c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004390:	f1c1 0114 	rsb	r1, r1, #20
 8004394:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004398:	fa4a fa01 	asr.w	sl, sl, r1
 800439c:	f1bb 0f00 	cmp.w	fp, #0
 80043a0:	4640      	mov	r0, r8
 80043a2:	4649      	mov	r1, r9
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	bfb8      	it	lt
 80043aa:	f1ca 0a00 	rsblt	sl, sl, #0
 80043ae:	f7fb ff17 	bl	80001e0 <__aeabi_dsub>
 80043b2:	4680      	mov	r8, r0
 80043b4:	4689      	mov	r9, r1
 80043b6:	4632      	mov	r2, r6
 80043b8:	463b      	mov	r3, r7
 80043ba:	4640      	mov	r0, r8
 80043bc:	4649      	mov	r1, r9
 80043be:	f7fb ff11 	bl	80001e4 <__adddf3>
 80043c2:	2400      	movs	r4, #0
 80043c4:	a37c      	add	r3, pc, #496	@ (adr r3, 80045b8 <__ieee754_pow+0xa28>)
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	4620      	mov	r0, r4
 80043cc:	460d      	mov	r5, r1
 80043ce:	f7fc f8bf 	bl	8000550 <__aeabi_dmul>
 80043d2:	4642      	mov	r2, r8
 80043d4:	e9cd 0100 	strd	r0, r1, [sp]
 80043d8:	464b      	mov	r3, r9
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	f7fb feff 	bl	80001e0 <__aeabi_dsub>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4630      	mov	r0, r6
 80043e8:	4639      	mov	r1, r7
 80043ea:	f7fb fef9 	bl	80001e0 <__aeabi_dsub>
 80043ee:	a374      	add	r3, pc, #464	@ (adr r3, 80045c0 <__ieee754_pow+0xa30>)
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f7fc f8ac 	bl	8000550 <__aeabi_dmul>
 80043f8:	a373      	add	r3, pc, #460	@ (adr r3, 80045c8 <__ieee754_pow+0xa38>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	4680      	mov	r8, r0
 8004400:	4689      	mov	r9, r1
 8004402:	4620      	mov	r0, r4
 8004404:	4629      	mov	r1, r5
 8004406:	f7fc f8a3 	bl	8000550 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4640      	mov	r0, r8
 8004410:	4649      	mov	r1, r9
 8004412:	f7fb fee7 	bl	80001e4 <__adddf3>
 8004416:	4604      	mov	r4, r0
 8004418:	460d      	mov	r5, r1
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004422:	f7fb fedf 	bl	80001e4 <__adddf3>
 8004426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800442a:	4680      	mov	r8, r0
 800442c:	4689      	mov	r9, r1
 800442e:	f7fb fed7 	bl	80001e0 <__aeabi_dsub>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4620      	mov	r0, r4
 8004438:	4629      	mov	r1, r5
 800443a:	f7fb fed1 	bl	80001e0 <__aeabi_dsub>
 800443e:	4642      	mov	r2, r8
 8004440:	4606      	mov	r6, r0
 8004442:	460f      	mov	r7, r1
 8004444:	464b      	mov	r3, r9
 8004446:	4640      	mov	r0, r8
 8004448:	4649      	mov	r1, r9
 800444a:	f7fc f881 	bl	8000550 <__aeabi_dmul>
 800444e:	a360      	add	r3, pc, #384	@ (adr r3, 80045d0 <__ieee754_pow+0xa40>)
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	4604      	mov	r4, r0
 8004456:	460d      	mov	r5, r1
 8004458:	f7fc f87a 	bl	8000550 <__aeabi_dmul>
 800445c:	a35e      	add	r3, pc, #376	@ (adr r3, 80045d8 <__ieee754_pow+0xa48>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fb febd 	bl	80001e0 <__aeabi_dsub>
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	f7fc f871 	bl	8000550 <__aeabi_dmul>
 800446e:	a35c      	add	r3, pc, #368	@ (adr r3, 80045e0 <__ieee754_pow+0xa50>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fb feb6 	bl	80001e4 <__adddf3>
 8004478:	4622      	mov	r2, r4
 800447a:	462b      	mov	r3, r5
 800447c:	f7fc f868 	bl	8000550 <__aeabi_dmul>
 8004480:	a359      	add	r3, pc, #356	@ (adr r3, 80045e8 <__ieee754_pow+0xa58>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fb feab 	bl	80001e0 <__aeabi_dsub>
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	f7fc f85f 	bl	8000550 <__aeabi_dmul>
 8004492:	a357      	add	r3, pc, #348	@ (adr r3, 80045f0 <__ieee754_pow+0xa60>)
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f7fb fea4 	bl	80001e4 <__adddf3>
 800449c:	4622      	mov	r2, r4
 800449e:	462b      	mov	r3, r5
 80044a0:	f7fc f856 	bl	8000550 <__aeabi_dmul>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4640      	mov	r0, r8
 80044aa:	4649      	mov	r1, r9
 80044ac:	f7fb fe98 	bl	80001e0 <__aeabi_dsub>
 80044b0:	4604      	mov	r4, r0
 80044b2:	460d      	mov	r5, r1
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4640      	mov	r0, r8
 80044ba:	4649      	mov	r1, r9
 80044bc:	f7fc f848 	bl	8000550 <__aeabi_dmul>
 80044c0:	2200      	movs	r2, #0
 80044c2:	e9cd 0100 	strd	r0, r1, [sp]
 80044c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fb fe87 	bl	80001e0 <__aeabi_dsub>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044da:	f7fc f963 	bl	80007a4 <__aeabi_ddiv>
 80044de:	4632      	mov	r2, r6
 80044e0:	4604      	mov	r4, r0
 80044e2:	460d      	mov	r5, r1
 80044e4:	463b      	mov	r3, r7
 80044e6:	4640      	mov	r0, r8
 80044e8:	4649      	mov	r1, r9
 80044ea:	f7fc f831 	bl	8000550 <__aeabi_dmul>
 80044ee:	4632      	mov	r2, r6
 80044f0:	463b      	mov	r3, r7
 80044f2:	f7fb fe77 	bl	80001e4 <__adddf3>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4620      	mov	r0, r4
 80044fc:	4629      	mov	r1, r5
 80044fe:	f7fb fe6f 	bl	80001e0 <__aeabi_dsub>
 8004502:	4642      	mov	r2, r8
 8004504:	464b      	mov	r3, r9
 8004506:	f7fb fe6b 	bl	80001e0 <__aeabi_dsub>
 800450a:	460b      	mov	r3, r1
 800450c:	4602      	mov	r2, r0
 800450e:	493b      	ldr	r1, [pc, #236]	@ (80045fc <__ieee754_pow+0xa6c>)
 8004510:	2000      	movs	r0, #0
 8004512:	f7fb fe65 	bl	80001e0 <__aeabi_dsub>
 8004516:	ec41 0b10 	vmov	d0, r0, r1
 800451a:	ee10 3a90 	vmov	r3, s1
 800451e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004526:	da30      	bge.n	800458a <__ieee754_pow+0x9fa>
 8004528:	4650      	mov	r0, sl
 800452a:	f000 f87d 	bl	8004628 <scalbn>
 800452e:	ec51 0b10 	vmov	r0, r1, d0
 8004532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004536:	f7ff bbd2 	b.w	8003cde <__ieee754_pow+0x14e>
 800453a:	4c31      	ldr	r4, [pc, #196]	@ (8004600 <__ieee754_pow+0xa70>)
 800453c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004540:	42a3      	cmp	r3, r4
 8004542:	d91a      	bls.n	800457a <__ieee754_pow+0x9ea>
 8004544:	4b2f      	ldr	r3, [pc, #188]	@ (8004604 <__ieee754_pow+0xa74>)
 8004546:	440b      	add	r3, r1
 8004548:	4303      	orrs	r3, r0
 800454a:	d009      	beq.n	8004560 <__ieee754_pow+0x9d0>
 800454c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004550:	2200      	movs	r2, #0
 8004552:	2300      	movs	r3, #0
 8004554:	f7fc fa6e 	bl	8000a34 <__aeabi_dcmplt>
 8004558:	3800      	subs	r0, #0
 800455a:	bf18      	it	ne
 800455c:	2001      	movne	r0, #1
 800455e:	e42b      	b.n	8003db8 <__ieee754_pow+0x228>
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	f7fb fe3c 	bl	80001e0 <__aeabi_dsub>
 8004568:	4632      	mov	r2, r6
 800456a:	463b      	mov	r3, r7
 800456c:	f7fc fa76 	bl	8000a5c <__aeabi_dcmpge>
 8004570:	2800      	cmp	r0, #0
 8004572:	d1eb      	bne.n	800454c <__ieee754_pow+0x9bc>
 8004574:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8004614 <__ieee754_pow+0xa84>
 8004578:	e6f7      	b.n	800436a <__ieee754_pow+0x7da>
 800457a:	469a      	mov	sl, r3
 800457c:	4b22      	ldr	r3, [pc, #136]	@ (8004608 <__ieee754_pow+0xa78>)
 800457e:	459a      	cmp	sl, r3
 8004580:	f63f aef3 	bhi.w	800436a <__ieee754_pow+0x7da>
 8004584:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004588:	e715      	b.n	80043b6 <__ieee754_pow+0x826>
 800458a:	ec51 0b10 	vmov	r0, r1, d0
 800458e:	4619      	mov	r1, r3
 8004590:	e7cf      	b.n	8004532 <__ieee754_pow+0x9a2>
 8004592:	491a      	ldr	r1, [pc, #104]	@ (80045fc <__ieee754_pow+0xa6c>)
 8004594:	2000      	movs	r0, #0
 8004596:	f7ff bb18 	b.w	8003bca <__ieee754_pow+0x3a>
 800459a:	2000      	movs	r0, #0
 800459c:	2100      	movs	r1, #0
 800459e:	f7ff bb14 	b.w	8003bca <__ieee754_pow+0x3a>
 80045a2:	4630      	mov	r0, r6
 80045a4:	4639      	mov	r1, r7
 80045a6:	f7ff bb10 	b.w	8003bca <__ieee754_pow+0x3a>
 80045aa:	460c      	mov	r4, r1
 80045ac:	f7ff bb5e 	b.w	8003c6c <__ieee754_pow+0xdc>
 80045b0:	2400      	movs	r4, #0
 80045b2:	f7ff bb49 	b.w	8003c48 <__ieee754_pow+0xb8>
 80045b6:	bf00      	nop
 80045b8:	00000000 	.word	0x00000000
 80045bc:	3fe62e43 	.word	0x3fe62e43
 80045c0:	fefa39ef 	.word	0xfefa39ef
 80045c4:	3fe62e42 	.word	0x3fe62e42
 80045c8:	0ca86c39 	.word	0x0ca86c39
 80045cc:	be205c61 	.word	0xbe205c61
 80045d0:	72bea4d0 	.word	0x72bea4d0
 80045d4:	3e663769 	.word	0x3e663769
 80045d8:	c5d26bf1 	.word	0xc5d26bf1
 80045dc:	3ebbbd41 	.word	0x3ebbbd41
 80045e0:	af25de2c 	.word	0xaf25de2c
 80045e4:	3f11566a 	.word	0x3f11566a
 80045e8:	16bebd93 	.word	0x16bebd93
 80045ec:	3f66c16c 	.word	0x3f66c16c
 80045f0:	5555553e 	.word	0x5555553e
 80045f4:	3fc55555 	.word	0x3fc55555
 80045f8:	fff00000 	.word	0xfff00000
 80045fc:	3ff00000 	.word	0x3ff00000
 8004600:	4090cbff 	.word	0x4090cbff
 8004604:	3f6f3400 	.word	0x3f6f3400
 8004608:	3fe00000 	.word	0x3fe00000
 800460c:	652b82fe 	.word	0x652b82fe
 8004610:	3c971547 	.word	0x3c971547
 8004614:	4090cc00 	.word	0x4090cc00

08004618 <fabs>:
 8004618:	ec51 0b10 	vmov	r0, r1, d0
 800461c:	4602      	mov	r2, r0
 800461e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004622:	ec43 2b10 	vmov	d0, r2, r3
 8004626:	4770      	bx	lr

08004628 <scalbn>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	ec55 4b10 	vmov	r4, r5, d0
 800462e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004632:	4606      	mov	r6, r0
 8004634:	462b      	mov	r3, r5
 8004636:	b991      	cbnz	r1, 800465e <scalbn+0x36>
 8004638:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800463c:	4323      	orrs	r3, r4
 800463e:	d03d      	beq.n	80046bc <scalbn+0x94>
 8004640:	4b35      	ldr	r3, [pc, #212]	@ (8004718 <scalbn+0xf0>)
 8004642:	4620      	mov	r0, r4
 8004644:	4629      	mov	r1, r5
 8004646:	2200      	movs	r2, #0
 8004648:	f7fb ff82 	bl	8000550 <__aeabi_dmul>
 800464c:	4b33      	ldr	r3, [pc, #204]	@ (800471c <scalbn+0xf4>)
 800464e:	429e      	cmp	r6, r3
 8004650:	4604      	mov	r4, r0
 8004652:	460d      	mov	r5, r1
 8004654:	da0f      	bge.n	8004676 <scalbn+0x4e>
 8004656:	a328      	add	r3, pc, #160	@ (adr r3, 80046f8 <scalbn+0xd0>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	e01e      	b.n	800469c <scalbn+0x74>
 800465e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004662:	4291      	cmp	r1, r2
 8004664:	d10b      	bne.n	800467e <scalbn+0x56>
 8004666:	4622      	mov	r2, r4
 8004668:	4620      	mov	r0, r4
 800466a:	4629      	mov	r1, r5
 800466c:	f7fb fdba 	bl	80001e4 <__adddf3>
 8004670:	4604      	mov	r4, r0
 8004672:	460d      	mov	r5, r1
 8004674:	e022      	b.n	80046bc <scalbn+0x94>
 8004676:	460b      	mov	r3, r1
 8004678:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800467c:	3936      	subs	r1, #54	@ 0x36
 800467e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004682:	4296      	cmp	r6, r2
 8004684:	dd0d      	ble.n	80046a2 <scalbn+0x7a>
 8004686:	2d00      	cmp	r5, #0
 8004688:	a11d      	add	r1, pc, #116	@ (adr r1, 8004700 <scalbn+0xd8>)
 800468a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800468e:	da02      	bge.n	8004696 <scalbn+0x6e>
 8004690:	a11d      	add	r1, pc, #116	@ (adr r1, 8004708 <scalbn+0xe0>)
 8004692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004696:	a31a      	add	r3, pc, #104	@ (adr r3, 8004700 <scalbn+0xd8>)
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f7fb ff58 	bl	8000550 <__aeabi_dmul>
 80046a0:	e7e6      	b.n	8004670 <scalbn+0x48>
 80046a2:	1872      	adds	r2, r6, r1
 80046a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80046a8:	428a      	cmp	r2, r1
 80046aa:	dcec      	bgt.n	8004686 <scalbn+0x5e>
 80046ac:	2a00      	cmp	r2, #0
 80046ae:	dd08      	ble.n	80046c2 <scalbn+0x9a>
 80046b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80046b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80046b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046bc:	ec45 4b10 	vmov	d0, r4, r5
 80046c0:	bd70      	pop	{r4, r5, r6, pc}
 80046c2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80046c6:	da08      	bge.n	80046da <scalbn+0xb2>
 80046c8:	2d00      	cmp	r5, #0
 80046ca:	a10b      	add	r1, pc, #44	@ (adr r1, 80046f8 <scalbn+0xd0>)
 80046cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046d0:	dac1      	bge.n	8004656 <scalbn+0x2e>
 80046d2:	a10f      	add	r1, pc, #60	@ (adr r1, 8004710 <scalbn+0xe8>)
 80046d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046d8:	e7bd      	b.n	8004656 <scalbn+0x2e>
 80046da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80046de:	3236      	adds	r2, #54	@ 0x36
 80046e0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80046e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046e8:	4620      	mov	r0, r4
 80046ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <scalbn+0xf8>)
 80046ec:	4629      	mov	r1, r5
 80046ee:	2200      	movs	r2, #0
 80046f0:	e7d4      	b.n	800469c <scalbn+0x74>
 80046f2:	bf00      	nop
 80046f4:	f3af 8000 	nop.w
 80046f8:	c2f8f359 	.word	0xc2f8f359
 80046fc:	01a56e1f 	.word	0x01a56e1f
 8004700:	8800759c 	.word	0x8800759c
 8004704:	7e37e43c 	.word	0x7e37e43c
 8004708:	8800759c 	.word	0x8800759c
 800470c:	fe37e43c 	.word	0xfe37e43c
 8004710:	c2f8f359 	.word	0xc2f8f359
 8004714:	81a56e1f 	.word	0x81a56e1f
 8004718:	43500000 	.word	0x43500000
 800471c:	ffff3cb0 	.word	0xffff3cb0
 8004720:	3c900000 	.word	0x3c900000

08004724 <with_errno>:
 8004724:	b510      	push	{r4, lr}
 8004726:	ed2d 8b02 	vpush	{d8}
 800472a:	eeb0 8a40 	vmov.f32	s16, s0
 800472e:	eef0 8a60 	vmov.f32	s17, s1
 8004732:	4604      	mov	r4, r0
 8004734:	f7ff f986 	bl	8003a44 <__errno>
 8004738:	eeb0 0a48 	vmov.f32	s0, s16
 800473c:	eef0 0a68 	vmov.f32	s1, s17
 8004740:	ecbd 8b02 	vpop	{d8}
 8004744:	6004      	str	r4, [r0, #0]
 8004746:	bd10      	pop	{r4, pc}

08004748 <xflow>:
 8004748:	4603      	mov	r3, r0
 800474a:	b507      	push	{r0, r1, r2, lr}
 800474c:	ec51 0b10 	vmov	r0, r1, d0
 8004750:	b183      	cbz	r3, 8004774 <xflow+0x2c>
 8004752:	4602      	mov	r2, r0
 8004754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004758:	e9cd 2300 	strd	r2, r3, [sp]
 800475c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004760:	f7fb fef6 	bl	8000550 <__aeabi_dmul>
 8004764:	ec41 0b10 	vmov	d0, r0, r1
 8004768:	2022      	movs	r0, #34	@ 0x22
 800476a:	b003      	add	sp, #12
 800476c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004770:	f7ff bfd8 	b.w	8004724 <with_errno>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	e7ee      	b.n	8004758 <xflow+0x10>
 800477a:	0000      	movs	r0, r0
 800477c:	0000      	movs	r0, r0
	...

08004780 <__math_uflow>:
 8004780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004788 <__math_uflow+0x8>
 8004784:	f7ff bfe0 	b.w	8004748 <xflow>
 8004788:	00000000 	.word	0x00000000
 800478c:	10000000 	.word	0x10000000

08004790 <__math_oflow>:
 8004790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004798 <__math_oflow+0x8>
 8004794:	f7ff bfd8 	b.w	8004748 <xflow>
 8004798:	00000000 	.word	0x00000000
 800479c:	70000000 	.word	0x70000000

080047a0 <__ieee754_sqrt>:
 80047a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a4:	4a68      	ldr	r2, [pc, #416]	@ (8004948 <__ieee754_sqrt+0x1a8>)
 80047a6:	ec55 4b10 	vmov	r4, r5, d0
 80047aa:	43aa      	bics	r2, r5
 80047ac:	462b      	mov	r3, r5
 80047ae:	4621      	mov	r1, r4
 80047b0:	d110      	bne.n	80047d4 <__ieee754_sqrt+0x34>
 80047b2:	4622      	mov	r2, r4
 80047b4:	4620      	mov	r0, r4
 80047b6:	4629      	mov	r1, r5
 80047b8:	f7fb feca 	bl	8000550 <__aeabi_dmul>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4620      	mov	r0, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	f7fb fd0e 	bl	80001e4 <__adddf3>
 80047c8:	4604      	mov	r4, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	ec45 4b10 	vmov	d0, r4, r5
 80047d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	dc0e      	bgt.n	80047f6 <__ieee754_sqrt+0x56>
 80047d8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80047dc:	4322      	orrs	r2, r4
 80047de:	d0f5      	beq.n	80047cc <__ieee754_sqrt+0x2c>
 80047e0:	b19d      	cbz	r5, 800480a <__ieee754_sqrt+0x6a>
 80047e2:	4622      	mov	r2, r4
 80047e4:	4620      	mov	r0, r4
 80047e6:	4629      	mov	r1, r5
 80047e8:	f7fb fcfa 	bl	80001e0 <__aeabi_dsub>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	f7fb ffd8 	bl	80007a4 <__aeabi_ddiv>
 80047f4:	e7e8      	b.n	80047c8 <__ieee754_sqrt+0x28>
 80047f6:	152a      	asrs	r2, r5, #20
 80047f8:	d115      	bne.n	8004826 <__ieee754_sqrt+0x86>
 80047fa:	2000      	movs	r0, #0
 80047fc:	e009      	b.n	8004812 <__ieee754_sqrt+0x72>
 80047fe:	0acb      	lsrs	r3, r1, #11
 8004800:	3a15      	subs	r2, #21
 8004802:	0549      	lsls	r1, r1, #21
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0fa      	beq.n	80047fe <__ieee754_sqrt+0x5e>
 8004808:	e7f7      	b.n	80047fa <__ieee754_sqrt+0x5a>
 800480a:	462a      	mov	r2, r5
 800480c:	e7fa      	b.n	8004804 <__ieee754_sqrt+0x64>
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	3001      	adds	r0, #1
 8004812:	02dc      	lsls	r4, r3, #11
 8004814:	d5fb      	bpl.n	800480e <__ieee754_sqrt+0x6e>
 8004816:	1e44      	subs	r4, r0, #1
 8004818:	1b12      	subs	r2, r2, r4
 800481a:	f1c0 0420 	rsb	r4, r0, #32
 800481e:	fa21 f404 	lsr.w	r4, r1, r4
 8004822:	4323      	orrs	r3, r4
 8004824:	4081      	lsls	r1, r0
 8004826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800482a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800482e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004832:	07d2      	lsls	r2, r2, #31
 8004834:	bf5c      	itt	pl
 8004836:	005b      	lslpl	r3, r3, #1
 8004838:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800483c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004840:	bf58      	it	pl
 8004842:	0049      	lslpl	r1, r1, #1
 8004844:	2600      	movs	r6, #0
 8004846:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800484a:	106d      	asrs	r5, r5, #1
 800484c:	0049      	lsls	r1, r1, #1
 800484e:	2016      	movs	r0, #22
 8004850:	4632      	mov	r2, r6
 8004852:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004856:	1917      	adds	r7, r2, r4
 8004858:	429f      	cmp	r7, r3
 800485a:	bfde      	ittt	le
 800485c:	193a      	addle	r2, r7, r4
 800485e:	1bdb      	suble	r3, r3, r7
 8004860:	1936      	addle	r6, r6, r4
 8004862:	0fcf      	lsrs	r7, r1, #31
 8004864:	3801      	subs	r0, #1
 8004866:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800486a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800486e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004872:	d1f0      	bne.n	8004856 <__ieee754_sqrt+0xb6>
 8004874:	4604      	mov	r4, r0
 8004876:	2720      	movs	r7, #32
 8004878:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800487c:	429a      	cmp	r2, r3
 800487e:	eb00 0e0c 	add.w	lr, r0, ip
 8004882:	db02      	blt.n	800488a <__ieee754_sqrt+0xea>
 8004884:	d113      	bne.n	80048ae <__ieee754_sqrt+0x10e>
 8004886:	458e      	cmp	lr, r1
 8004888:	d811      	bhi.n	80048ae <__ieee754_sqrt+0x10e>
 800488a:	f1be 0f00 	cmp.w	lr, #0
 800488e:	eb0e 000c 	add.w	r0, lr, ip
 8004892:	da42      	bge.n	800491a <__ieee754_sqrt+0x17a>
 8004894:	2800      	cmp	r0, #0
 8004896:	db40      	blt.n	800491a <__ieee754_sqrt+0x17a>
 8004898:	f102 0801 	add.w	r8, r2, #1
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	458e      	cmp	lr, r1
 80048a0:	bf88      	it	hi
 80048a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80048a6:	eba1 010e 	sub.w	r1, r1, lr
 80048aa:	4464      	add	r4, ip
 80048ac:	4642      	mov	r2, r8
 80048ae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80048b2:	3f01      	subs	r7, #1
 80048b4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80048b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80048bc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80048c0:	d1dc      	bne.n	800487c <__ieee754_sqrt+0xdc>
 80048c2:	4319      	orrs	r1, r3
 80048c4:	d01b      	beq.n	80048fe <__ieee754_sqrt+0x15e>
 80048c6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800494c <__ieee754_sqrt+0x1ac>
 80048ca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004950 <__ieee754_sqrt+0x1b0>
 80048ce:	e9da 0100 	ldrd	r0, r1, [sl]
 80048d2:	e9db 2300 	ldrd	r2, r3, [fp]
 80048d6:	f7fb fc83 	bl	80001e0 <__aeabi_dsub>
 80048da:	e9da 8900 	ldrd	r8, r9, [sl]
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4640      	mov	r0, r8
 80048e4:	4649      	mov	r1, r9
 80048e6:	f7fc f8af 	bl	8000a48 <__aeabi_dcmple>
 80048ea:	b140      	cbz	r0, 80048fe <__ieee754_sqrt+0x15e>
 80048ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80048f0:	e9da 0100 	ldrd	r0, r1, [sl]
 80048f4:	e9db 2300 	ldrd	r2, r3, [fp]
 80048f8:	d111      	bne.n	800491e <__ieee754_sqrt+0x17e>
 80048fa:	3601      	adds	r6, #1
 80048fc:	463c      	mov	r4, r7
 80048fe:	1072      	asrs	r2, r6, #1
 8004900:	0863      	lsrs	r3, r4, #1
 8004902:	07f1      	lsls	r1, r6, #31
 8004904:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004908:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800490c:	bf48      	it	mi
 800490e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004912:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004916:	4618      	mov	r0, r3
 8004918:	e756      	b.n	80047c8 <__ieee754_sqrt+0x28>
 800491a:	4690      	mov	r8, r2
 800491c:	e7be      	b.n	800489c <__ieee754_sqrt+0xfc>
 800491e:	f7fb fc61 	bl	80001e4 <__adddf3>
 8004922:	e9da 8900 	ldrd	r8, r9, [sl]
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f7fc f881 	bl	8000a34 <__aeabi_dcmplt>
 8004932:	b120      	cbz	r0, 800493e <__ieee754_sqrt+0x19e>
 8004934:	1ca0      	adds	r0, r4, #2
 8004936:	bf08      	it	eq
 8004938:	3601      	addeq	r6, #1
 800493a:	3402      	adds	r4, #2
 800493c:	e7df      	b.n	80048fe <__ieee754_sqrt+0x15e>
 800493e:	1c63      	adds	r3, r4, #1
 8004940:	f023 0401 	bic.w	r4, r3, #1
 8004944:	e7db      	b.n	80048fe <__ieee754_sqrt+0x15e>
 8004946:	bf00      	nop
 8004948:	7ff00000 	.word	0x7ff00000
 800494c:	20000068 	.word	0x20000068
 8004950:	20000060 	.word	0x20000060

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
